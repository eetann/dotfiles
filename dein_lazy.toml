# 遅延実行されるプラグイン

[[plugins]] # TOMLのシンタックスハイライト
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # その場で実行できる
repo = 'thinca/vim-quickrun'
hook_add = '''
	let g:quickrun_config = {}
	let g:quickrun_config = {
		\ "_":{
		\ 'runner'    : 'vimproc',
		\ 'runner/vimproc/updatetime' : 60,
		\ 'outputter/buffer/close_on_empty' : 1,
		\ 'outputter/buffer/into':1,
		\ 'outputter/buffer/split'  :
		\ '%{winwidth(0) * 2 < winheight(0) * 5 ? winheight(0)/4 : "vertical"}',
		\ },
		\ 'python': {
		\   'command': 'python3'
		\ },
		\ }
		" splitは、以下を用いている
		" curly-braces-names(波括弧変数)で{}内を評価
		" expr2 ? expr1 : expr1 の式でexpr2が真なら前、偽なら後ろのexpr1を評価
		" https://vim-jp.org/vimdoc-ja/eval.html#expr1
		" \ 'markdown': {
		" \ 'runner'    : 'vimscript',
		" \ 'command': ":OpenBrowser",
		" \ 'args': "%{substitute(%{expand(%s:p)}, '\v/mnt/(.)', '\1:/', '')}",
		" \ 'exec': "%c %a",
		" \ 'outputter':'null',
		" \ },
	" qでquickfixを閉じる
	autocmd vimrc FileType qf nnoremap <silent><buffer>q :quit<CR>
	" normal or visual modeのとき <leader> + r で保存してからquickrunの実行
	let g:quickrun_no_default_key_mappings = 1
	nnoremap <leader>r :write<CR>:QuickRun -mode n<CR>
	xnoremap <leader>r :<C-U>write<CR>gv:QuickRun -mode v<CR>
	" <C-c> でquickrunを停止
	nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

# ----カーソル位置のコンテキストに合わせてファイルタイプを切り替え----
[[plugins]] # 判定ライブラリ
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml','md','mdwn','mkd','mkdn','mark']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['toml','md','mdwn','mkd','mkdn','mark']
depends = ['context_filetype.vim']

[[plugins]] # プレビューをブラウザで開く
repo = 'tyru/open-browser.vim'
on_ft = 'md'
hook_add = '''
	" if filereadable('/proc/sys/fs/binfmt_misc/WSLInterop')
	"     " autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" substitute(expand("%:p"), '/mnt/c', 'c:/', '')<CR>
	"     autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" substitute(expand("%:p"), '\v/mnt/(.)', '\1:/', '')<CR>
	" else
	"     autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" expand("%:p")<CR>
	" endif
	autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p 
		\:execute "OpenBrowser" substitute(expand("%:p"), '\v/mnt/(.)', '\1:/', 'c')<CR>
'''

# [[plugins]] # edit for fish
# repo = 'dag/vim-fish'

[[plugins]] # 画面の移動が便利になる
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
    " デフォルトのキーマッピングを無効に
    let g:EasyMotion_do_mapping = 0
    " f + 2文字 で画面全体を検索してジャンプ
    nmap se <plug>(easymotion-overwin-f2)
    " 検索時、大文字小文字を区別しない
    let g:EasyMotion_smartcase = 1
	let g:EasyMotion_use_migemo = 1
'''

[[plugins]] # undoを視覚的に
repo = 'sjl/gundo.vim'
hook_add = '''
	let g:gundo_prefer_python3 = 1
	nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]] # 指定した文字で整形
repo = 'junegunn/vim-easy-align'
on_event = 'VimEnter'
hook_add = '''
	" Start interactive EasyAlign in visual mode (e.g. vipga)
	xmap ga <Plug>(EasyAlign)
	" Start interactive EasyAlign for a motion/text object (e.g. gaip)
	nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # ドットコマンド対象を拡張
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'

[[plugins]] # file explorer
repo = 'Shougo/defx.nvim'
on_event = 'VimEnter'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc','defx-icons']
hook_add = '''
	nnoremap <silent> <Space>f
	\ :<C-u>Defx -split=vertical -columns=mark:indent:icons:filename:type
		\ -winwidth=40 -direction=topleft<CR>
	autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ defx#do_action('drop')
	  nnoremap <silent><buffer><expr> o
	  \ defx#do_action('multi', ['drop', 'quit'])
	  nnoremap <silent><buffer><expr> c
	  \ defx#do_action('copy')
	  nnoremap <silent><buffer><expr> m
	  \ defx#do_action('move')
	  nnoremap <silent><buffer><expr> p
	  \ defx#do_action('paste')
	  nnoremap <silent><buffer><expr> l
	  \ defx#do_action('open')
	  nnoremap <silent><buffer><expr> E
	  \ defx#do_action('open', 'vsplit')
	  nnoremap <silent><buffer><expr> P
	  \ defx#do_action('open', 'pedit')
	  nnoremap <silent><buffer><expr> O
	  \ defx#do_action('open_or_close_tree')
	  nnoremap <silent><buffer><expr> K
	  \ defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N
	  \ defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> M
	  \ defx#do_action('new_multiple_files')
	  nnoremap <silent><buffer><expr> C
	  \ defx#do_action('toggle_columns',
	  \                'mark:filename:type:size:time')
	  nnoremap <silent><buffer><expr> S
	  \ defx#do_action('toggle_sort', 'time')
	  nnoremap <silent><buffer><expr> d
	  \ defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r
	  \ defx#do_action('rename')
	  nnoremap <silent><buffer><expr> !
	  \ defx#do_action('execute_command')
	  nnoremap <silent><buffer><expr> x
	  \ defx#do_action('execute_system')
	  nnoremap <silent><buffer><expr> yy
	  \ defx#do_action('yank_path')
	  nnoremap <silent><buffer><expr> .
	  \ defx#do_action('toggle_ignored_files')
	  nnoremap <silent><buffer><expr> ;
	  \ defx#do_action('repeat')
	  nnoremap <silent><buffer><expr> h
	  \ defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> ~
	  \ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> q
	  \ defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space>
	  \ defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> *
	  \ defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> j
	  \ line('.') == line('$') ? 'gg' : 'j'
	  nnoremap <silent><buffer><expr> k
	  \ line('.') == 1 ? 'G' : 'k'
	  nnoremap <silent><buffer><expr> <C-l>
	  \ defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g>
	  \ defx#do_action('print')
	  nnoremap <silent><buffer><expr> cd
	  \ defx#do_action('change_vim_cwd')
	endfunction
'''

[[plugins]] # defx icons
repo = 'kristijanhusak/defx-icons'
on_source = ['Shougo/defx.nvim']
hook_add = '''
	let g:defx_icons_enable_syntax_highlight = 1
	let g:defx_icons_column_length = 2
'''

# [[plugins]] # インタラクティブフィルター
# repo = 'Shougo/denite.nvim'
# depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
# on_event = 'BufRead'
# hook_add = '''
#     " Denite用プレフィックス
#     nmap [denite] <Nop>
#     map <C-j> [denite]
#     " カレントディレクトリ以下のファイル検索
#     nmap <silent> [denite]<C-p> :<C-u>Denite file/rec -highlight-mode-insert=Search<CR>
#     " ファイル内の関数/クラス等の検索
#     nmap <silent> [denite]<C-o> :<C-u>Denite outline -highlight-mode-insert=Search<CR>
#     "Denite でバッファ内検索 
#     nnoremap <silent> [denite]<C-l> :<C-u>Denite line -highlight-mode-insert=Search<CR>
# '''
# # denite#custom#*はプラグインが読み終わってから。
# hook_post_source = '''
#     if executable('jvgrep')
#         call denite#custom#var('grep', 'command', ['jvgrep'])
#         call denite#custom#var('grep', 'default_opts', ['-i'])
#         call denite#custom#var('grep', 'recursive_opts', ['-R'])
#         call denite#custom#var('grep', 'pattern_opt', [])
#         call denite#custom#var('grep', 'separator', [])
#         call denite#custom#var('grep', 'final_opts', [])
#     endif
#     " 上下移動
#     call denite#custom#map('normal', '<C-n>', '<denite:move_to_next_line>')
#     call denite#custom#map('normal', '<C-p>', '<denite:move_to_previous_line>')
#     call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')
#     call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
#     " 入力履歴移動
#     call denite#custom#map('insert', '<C-j>', '<denite:assign_next_text>')
#     call denite#custom#map('insert', '<C-k>', '<denite:assign_previous_text>')
#     " file_rec検索時にfuzzymatchを有効にし、検索対象から指定のファイルを除外
#     call denite#custom#source(
#         \ 'file_rec', 'matchers', ['matcher/fuzzy', 'matcher/project_files', 'matcher_ignore_globs'])
#     " 検索対象外のファイル指定
#     call denite#custom#filter('matcher/ignore_globs', 'ignore/globs',
#         \ [ '.git/', '.ropeproject/', '__pycache__/',
#         \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
# '''

# ----スニペット----
[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
on_event = 'VimEnter'
on_ft = ['snippet']
depends = ['neosnippet-snippets', 'nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = '''
	" <TAB>: completion.
	" inoremap <expr> <S-TAB> pumvisible() ? '<C-p>' : '<S-TAB>'
	imap <C-k> <Plug>(neosnippet_expand_or_jump)
	smap <C-k> <Plug>(neosnippet_expand_or_jump)
	imap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '<C-n>' : '<TAB>'
	smap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'
	let g:neosnippet#snippets_directory = '~/dotfiles/mysnippet'
'''

# ----自動補完----
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neosnippet.vim', 'nvim-yarp', 'vim-hug-neovim-rpc']
on_event = 'VimEnter'
hook_add = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#enable_smart_case = 1
	let g:deoplete#auto_complete_delay = 10
	" let g:deoplete#auto_complete_start_length = 3
	let g:deoplete#auto_refresh_delay = 10
	let g:deoplete#refresh_always = v:true
	inoremap <expr><tab> pumvisible() ? "\<C-n>" :
		\ neosnippet#expandable_or_jumpable() ?
		\    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'Shougo/neco-syntax'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'simeji/winresizer'
on_event = 'VimEnter'
hook_add = '''
	" リサイズ幅を1ずつに変更
    let g:winrisizer_vert_resize=1
	let g:winresizer_horiz_resize=1
'''
