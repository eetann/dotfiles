[[plugins]] # コメントアウトに便利
repo = 'tyru/caw.vim'
on_map = ['<Plug>(caw:']
hook_add = '''
    let g:caw_dollarpos_sp_left=' '
    " TODO: コメントアウト時にカーソル位置を移動しない
    nmap gc     <Plug>(caw:prefix)
    xmap gc     <Plug>(caw:prefix)
    nmap gcc    <Plug>(caw:hatpos:toggle)
    xmap gcc    <Plug>(caw:hatpos:toggle)
    nmap gci    <Plug>(caw:hatpos:comment)
    nmap gcui   <Plug>(caw:hatpos:uncomment)
    nmap gcI    <Plug>(caw:zeropos:comment)
    nmap gcuI   <Plug>(caw:zeropos:uncomment)
    nmap gca    <Plug>(caw:dollarpos:comment)
    nmap gcua   <Plug>(caw:dollarpos:uncomment)
    xmap gcb    <Plug>(caw:box:comment)
    nmap gco    <Plug>(caw:jump:comment-next)
    nmap gcO    <Plug>(caw:jump:comment-prev)
    nmap gct    <Plug>(caw:jump:comment-next)TODO:<Space>
    nmap gcT    <Plug>(caw:jump:comment-prev)TODO:<Space>
    nnoremap gcl :vimgrep /TODO:/j %<CR>
'''

[[plugins]] # プレビューをブラウザで開く
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
on_cmd = "OpenBrowser"
hook_add = '''
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>p
		\ :execute "OpenBrowser http://localhost:8000/" . expand('%')<CR>
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>cp
		\ :term ++rows=5 cmd.exe /c python server.py
	let g:netrw_nogx = 1 " disable netrw's gx mapping.
	nmap gx <Plug>(openbrowser-smart-search)
	vmap gx <Plug>(openbrowser-smart-search)
	function! My_opens()
		execute 'OpenBrowser ' . substitute(expand('%:p'), '\v/mnt/(.)', '\1:/', 'c')
	endfunction
'''

[[plugins]] # その場で実行できる
repo = 'thinca/vim-quickrun'
on_cmd = "QuickRun"
hook_add = '''
    set errorformat=%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
    let g:quickrun_config = {}
    let g:quickrun_config = {
        \ "_":{
        \ 'runner'    : 'job',
        \ 'runner/terminal/into':1,
        \ 'outputter' : 'quickfix',
        \ 'outputter/quickfix/into':1,
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ 'outputter/buffer/into':1,
        \ 'outputter/buffer/split'  :
        \ '%{winwidth(0) * 2 < winheight(0) * 5 ? winheight(0)/4 : "vertical"}',
        \ },
        \ 'markdown': {
        \ 'runner'    : 'vimscript',
        \ 'exec':'%c %a',
        \ 'command': ":call",
        \ 'args': 'My_opens()',
        \ 'outputter':'null',
        \ },
        \ 'html': {
        \ 'runner'    : 'vimscript',
        \ 'exec':'%c %a',
        \ 'command': ":call",
        \ 'args': 'My_opens()',
        \ 'outputter':'null',
        \ },
        \ 'matlab': {
        \ 'runner':"vimscript",
        \ 'exec':'%c %o',
        \ 'command': ':call',
        \ 'cmdopt': 'matlab#RunCurrentFile()'
        \ },
        \ 'tex': {
        \ 'command': 'latexmk',
        \ 'args':'-pvc',
        \ 'exec':'%c %s %a',
        \ },
        \ }
        "\ 'src': '%{system("wslpath -w %{expand(\"%:p\")}")}',
    " qでquickfixを閉じる
    autocmd vimrc FileType qf nnoremap <silent><buffer>q :quit<CR>
    " normal or visual modeのとき <leader> + r で保存してからquickrunの実行
    let g:quickrun_no_default_key_mappings = 1
    nnoremap <leader>r :write<CR>:QuickRun -mode n<CR>
    nnoremap <leader>R :write<CR>:QuickRun -runner terminal<CR>
    xnoremap <leader>r :<C-U>write<CR>gv:QuickRun -mode v<CR>
    " <C-c> でquickrunを停止
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''


[[plugins]] # カラーコードの色表示
repo = 'ap/vim-css-color'
on_event = 'VimEnter'

[[plugins]] # undoを視覚的に
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'
hook_add = '''
    let g:gundo_prefer_python3 = 1
    nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]] # 指定した文字で整形
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
    " コメントや文字列中でも有効化
    let g:easy_align_ignore_groups = []
'''

[[plugins]] # Camel _ のmotionを<leader>w b e geに対応
repo = 'bkad/CamelCaseMotion'
on_map = ['<Plug>CamelCaseMotion']
hook_add = '''
    map <silent> <leader>w <Plug>CamelCaseMotion_w
    map <silent> <leader>b <Plug>CamelCaseMotion_b
    map <silent> <leader>e <Plug>CamelCaseMotion_e
    map <silent> <leader>ge <Plug>CamelCaseMotion_ge
'''

[[plugins]] # 適切なカーソルラインのハイライト
repo = 'delphinus/vim-auto-cursorline'
on_event = 'VimEnter'
hook_add = '''
    autocmd vimrc FileType defx :let b:auto_cursorline_disabled = 1
'''

[[plugins]]
repo = 'skanehira/translate.vim'
on_cmd = ['Translate','AutoTranslateModeEnable','AutoTranslateModeDisable','AutoTranslateModeToggle']

[[plugins]] # すごいやつ(語彙力)
repo = 'Shougo/denite.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
hook_add = '''
    nnoremap <silent> ,fr :<C-u>Denite file/rec -auto-action=preview<CR>
    nnoremap <silent> ,fo :<C-u>Denite file/old -auto-action=preview<CR>
    nnoremap <silent> ,ft :<C-u>Denite filetype -start-filter<CR>
    nnoremap <silent> ,ch :<C-u>Denite command_history -start-filter<CR>
    nnoremap <silent> ,b :<C-u>Denite buffer -auto-action=preview<CR>
    nnoremap <silent> ,l :<C-u>Denite line -auto-action=preview -start-filter<CR>
    nnoremap <silent> ,j :<C-u>Denite jump -auto-action=preview<CR>
    nnoremap <silent> ,o :<C-u>Denite outline -auto-action=preview -start-filter<CR>
    nnoremap <silent> ,h :<C-u>Denite help -start-filter<CR>
    nnoremap <silent> ,me :<C-u>Denite menu -auto-action=preview<CR>
    nnoremap <silent> ,ma :<C-u>Denite mark -auto-action=preview<CR>
    nnoremap <silent> ,r :<C-u>Denite -resume<CR>
    nnoremap <silent> ,gg :<C-u>DeniteBufferDir grep -auto-action=preview<CR>
    nnoremap <silent> ,gw :<C-u>DeniteCursorWord grep -auto-action=preview<CR>
'''
hook_post_source = '''
    autocmd vimrc FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> <C-d>
        \ denite#do_map('move_up_path')
        nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> a
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> o
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
        nnoremap <silent><buffer><expr> <C-c>
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> sb
        \ denite#do_map('do_action', 'split')
        nnoremap <silent><buffer><expr> sv
        \ denite#do_map('do_action', 'vsplit')
        nnoremap <silent><buffer><C-n> j
        nnoremap <silent><buffer><C-p> k
    endfunction
    let s:menus = {}
    let s:menus.a_often_use = {'description':'often use commands'}
    let s:menus.a_often_use.command_candidates = [
        \ ['diffthis on', 'windo diffthis'],
        \ ['diff off', 'windo diffof'],
        \ ['on \"\"\" change html', ':call My_context_on()'],
        \ ['off \"\"\" change html', ':call My_context_off()'],
        \ ['setlocal filetype=python', 'setlocal filetype=python'],
        \ ['setlocal filetype=html', 'setlocal filetype=html'],
        \ ['setlocal filetype=xml', 'setlocal filetype=xml'],
        \ ]
    let s:menus.b_files = {'description':'files'}
    let s:menus.b_files.command_candidates = [
        \ ['dotfiles', "call denite#start([{'name': 'file/rec', 'args': ['~/dotfiles']}])"],
        \ ['my_plugins', "call denite#start([{'name': 'file/rec', 'args': ['~/.vim/my_plugins']}])"],
        \ ]
    let s:menus.c_dein = {'description':'Plugin management'}
    let s:menus.c_dein.command_candidates = [
        \ ['call dein#update()', 'call dein#update()'],
        \ ['call dein#recache_runtimepath()', 'call dein#recache_runtimepath()'],
        \ ['Denite dein', 'Denite dein'],
        \ ['echo dein#get_updates_log()', 'echo dein#get_updates_log()'],
        \ ['echo dein#get_log()', 'echo dein#get_log()'],
        \ ['clean nouse plugins', 'call map(dein#check_clean(), "delete(v:val, \"rf\")")'],
        \ ]
    let s:menus.d_good_help = {'description': 'good help'}
    let s:menus.d_good_help.command_candidates = [
        \ ['home', 'help '],
        \ ['eval', 'help eval'],
        \ ['ex-cmd-index', 'help ex-cmd-index'],
        \ ['function-list', 'help function-list'],
        \ ['functions', 'help functions'],
        \ ['help-summary', 'help help-summary'],
        \ ['index', 'help index'],
        \ ['quickref', 'help quickref'],
        \ ]
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ ['*~', '*.o', '*.exe', '*.bak',
        \ '.git/', '.ropeproject/', '__pycache__/', 'tmp/', 'var/', '.deprecated/',
        \ 'venv/', 'images/', '*.min.*', 'img/', 'fonts/', 'tags', '*.png', '*.bmp',
        \ '*.pdf', '*.docx', '*.xlsx'])
    call denite#custom#source('file/rec', 'matchers', ['matcher/ignore_globs'])
    call denite#custom#var('grep', 'command', ['jvgrep'])
    call denite#custom#var('grep', 'default_opts', ['-i'])
    call denite#custom#var('grep', 'recursive_opts', ['-R'])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('menu', 'menus', s:menus)
'''

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'
on_event = 'VimEnter'

[[plugins]]
repo = '~/.vim/my_plugins/foldppp'
on_cmd = 'Foldppp'
on_map = '<Plug>(foldppp-show)'
hook_add = '''
    nmap <leader>s <Plug>(foldppp-show)
'''

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'
on_ft = ['help']

[[plugins]]
repo = 'simeji/winresizer'
on_event = 'WinEnter'
on_if = 'winnr("$") > 1'
hook_post_source = '''
    " リサイズ幅を1ずつに変更
    let g:winrisizer_vert_resize=1
    let g:winresizer_horiz_resize=1
'''

[[plugins]] # file explorer
repo = 'Shougo/defx.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc','defx-icons']
on_cmd = 'Defx'
hook_add = '''
    " windowが編集ファイル以外だけになったら違うバッファへ
    autocmd vimrc WinEnter * call s:move_buffer_for_defx()
    function! s:move_buffer_for_defx() abort
        if &ft == 'defx' && winnr('$') == 1
            q
            bprevious
            let s:win_id = win_getid()
            Defx -split=vertical -columns=indent:filename:type
            \ -winwidth=30  -direction=topleft
            let succeed = win_gotoid(s:win_id)
            " TODO: bufnrだと、隠しバッファ状態でも検知してしまう
            " TODO: defxではなくTagbarで2つの状態のときも検知したい
        elseif winnr('$') == 2 && &ft == 'defx' && bufnr('Tagbar')!=-1
            q
            TagbarClose
            bprevious
            let s:win_id = win_getid()
            Defx -split=vertical -columns=indent:filename:type
            \ -winwidth=30  -direction=topleft
            TagbarOpen
            let succeed = win_gotoid(s:win_id)
        elseif &ft == 'Tagbar' && winnr('$') == 1
            TagbarClose
            bprevious
            TagbarOpen
        end
    endfunction
    nnoremap <silent> <Space>f
    \ :<C-u>Defx -split=vertical -columns=indent:filename:type
        \ -winwidth=30 -direction=topleft -toggle<CR>
'''
hook_source = '''
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ defx#is_directory() ?
            \ defx#do_action('open_or_close_tree') :
            \ defx#do_action('drop')
        nnoremap <silent><buffer><expr> o
        \ defx#do_action('open')
        nnoremap <silent><buffer><expr> l
        \ defx#is_opened_tree() ?
            \ defx#do_action('open') :
            \ defx#is_directory() ?
                \ defx#do_action('open_tree') :
                \ ((&columns > 150) ?
                    \ defx#do_action('drop'):
                    \ defx#do_action('multi', ['drop', 'quit']))
        nnoremap <silent><buffer><expr> L
        \ defx#is_directory() ?
            \ defx#do_action('open') :
            \ defx#do_action('drop')
        nnoremap <silent><buffer><expr> sb
        \ defx#do_action('multi', [['drop', 'split'], 'quit'])
        nnoremap <silent><buffer><expr> sv
        \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
        nnoremap <silent><buffer><expr> p
        \ defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'extension')
        nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> h
        \ defx#is_opened_tree() ?
            \ defx#do_action('close_tree') :
            \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> H
        \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
        nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
    endfunction
'''
