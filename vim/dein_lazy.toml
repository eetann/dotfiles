# 遅延実行されるプラグイン

[[plugins]] # TOMLのシンタックスハイライト
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # その場で実行できる
repo = 'thinca/vim-quickrun'
hook_add = '''
	let g:quickrun_config = {}
	let g:quickrun_config = {
		\ "_":{
		\ 'runner'    : 'vimproc',
		\ 'runner/vimproc/updatetime' : 60,
	    \ 'outputter' : 'error',
	    \ 'outputter/error/success' : 'buffer',
	    \ 'outputter/error/error'   : 'quickfix',
		\ 'outputter/buffer/close_on_empty' : 1,
		\ 'outputter/buffer/into':1,
		\ 'outputter/buffer/split'  :
		\ '%{winwidth(0) * 2 < winheight(0) * 5 ? winheight(0)/4 : "vertical"}',
		\ },
		\ }
		" \ 'python': {
		" \   'command': 'python3'
		" \ },
		" splitは、以下を用いている
		" curly-braces-names(波括弧変数)で{}内を評価
		" expr2 ? expr1 : expr1 の式でexpr2が真なら前、偽なら後ろのexpr1を評価
		" https://vim-jp.org/vimdoc-ja/eval.html#expr1
		" \ 'markdown': {
		" \ 'runner'    : 'vimscript',
		" \ 'command': ":OpenBrowser",
		" \ 'args': "%{substitute(%{expand(%s:p)}, '\v/mnt/(.)', '\1:/', '')}",
		" \ 'exec': "%c %a",
		" \ 'outputter':'null',
		" \ },
	" qでquickfixを閉じる
	autocmd vimrc FileType qf nnoremap <silent><buffer>q :quit<CR>
	" normal or visual modeのとき <leader> + r で保存してからquickrunの実行
	let g:quickrun_no_default_key_mappings = 1
	nnoremap <leader>r :write<CR>:QuickRun -mode n<CR>
	xnoremap <leader>r :<C-U>write<CR>gv:QuickRun -mode v<CR>
	" <C-c> でquickrunを停止
	nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

# ----カーソル位置のコンテキストに合わせてファイルタイプを切り替え----
[[plugins]] # 判定ライブラリ
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml','md','mdwn','mkd','mkdn','mark']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['toml','md','mdwn','mkd','mkdn','mark']
depends = ['context_filetype.vim']

[[plugins]] # プレビューをブラウザで開く
repo = 'tyru/open-browser.vim'
on_ft = 'md'
hook_add = '''
	" if filereadable('/proc/sys/fs/binfmt_misc/WSLInterop')
	"     " autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" substitute(expand("%:p"), '/mnt/c', 'c:/', '')<CR>
	"     autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" substitute(expand("%:p"), '\v/mnt/(.)', '\1:/', '')<CR>
	" else
	"     autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" expand("%:p")<CR>
	" endif
	autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p 
		\:execute "OpenBrowser" substitute(expand("%:p"), '\v/mnt/(.)', '\1:/', 'c')<CR>
'''

[[plugins]] # 画面の移動が便利になる
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
    " デフォルトのキーマッピングを無効に
    let g:EasyMotion_do_mapping = 0
    " f + 2文字 で画面全体を検索してジャンプ
    nmap se <plug>(easymotion-overwin-f2)
    " 検索時、大文字小文字を区別しない
    let g:EasyMotion_smartcase = 1
	let g:EasyMotion_use_migemo = 1
'''

[[plugins]] # undoを視覚的に
repo = 'sjl/gundo.vim'
hook_add = '''
	let g:gundo_prefer_python3 = 1
	nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]] # 指定した文字で整形
repo = 'junegunn/vim-easy-align'
on_event = 'VimEnter'
hook_add = '''
	" Start interactive EasyAlign in visual mode (e.g. vipga)
	xmap ga <Plug>(EasyAlign)
	" Start interactive EasyAlign for a motion/text object (e.g. gaip)
	nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # ドットコマンド対象を拡張
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'


[[plugins]] # edit for fish
on_ft = ['fish']
repo = 'dag/vim-fish'

[[plugins]]
repo = 'simeji/winresizer'
on_event = 'VimEnter'
hook_add = '''
	" リサイズ幅を1ずつに変更
    let g:winrisizer_vert_resize=1
	let g:winresizer_horiz_resize=1
'''

