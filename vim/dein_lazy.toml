# 遅延実行されるプラグイン

[[plugins]] # TOMLのシンタックスハイライト
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # その場で実行できる
repo = 'thinca/vim-quickrun'
hook_add = '''
	let g:quickrun_config = {}
	let g:quickrun_config = {
		\ "_":{
		\ 'runner'    : 'vimproc',
		\ 'runner/vimproc/updatetime' : 60,
	    \ 'outputter' : 'error',
	    \ 'outputter/error/success' : 'buffer',
	    \ 'outputter/error/error'   : 'quickfix',
		\ 'outputter/buffer/close_on_empty' : 1,
		\ 'outputter/buffer/into':1,
		\ 'outputter/buffer/split'  :
		\ '%{winwidth(0) * 2 < winheight(0) * 5 ? winheight(0)/4 : "vertical"}',
		\ },
		\ 'python': {
		\   'command': 'python3.7'
		\ },
		\ 'markdown': {
		\ 'runner'    : 'vimscript',
		\ 'command': "OpenBrowser",
		\ 'cmdopt': "substitute(expand(%s:p), '\v/mnt/(.)', '\1:/', '')",
		\ 'exec': "%c %o",
		\ 'outputter': 'null',
		\ },
		\ 'matlab': {
		\ 'runner':"shell",
		\ 'exec':'%c %o',
		\ 'command': '/mnt/c/Program Files/MATLAB/R2019a/bin/matlab.exe',
		\ 'cmdopt': '-nodesktop -nosplash -r "%:r, which(%:r)"'
		\ },
		\ }
		" splitは、以下を用いている
		" curly-braces-names(波括弧変数)で{}内を評価
		" expr2 ? expr1 : expr1 の式でexpr2が真なら前、偽なら後ろのexpr1を評価
		" https://vim-jp.org/vimdoc-ja/eval.html#expr1
		" \ 'markdown': {
		" \ 'runner'    : 'vimscript',
		" \ 'command': ":OpenBrowser",
		" \ 'args': "%{substitute(%{expand(%s:p)}, '\v/mnt/(.)', '\1:/', '')}",
		" \ 'exec': "%c %a",
		" \ 'outputter':'null',
		" \ },
	" qでquickfixを閉じる
	autocmd vimrc FileType qf nnoremap <silent><buffer>q :quit<CR>
	" normal or visual modeのとき <leader> + r で保存してからquickrunの実行
	let g:quickrun_no_default_key_mappings = 1
	nnoremap <leader>r :write<CR>:QuickRun -mode n<CR>
	nnoremap <leader>R :write<CR>:QuickRun -runner terminal<CR>
	xnoremap <leader>r :<C-U>write<CR>gv:QuickRun -mode v<CR>
	" <C-c> でquickrunを停止
	nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

# ----カーソル位置のコンテキストに合わせてファイルタイプを切り替え----
[[plugins]] # 判定ライブラリ
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml','md','mdwn','mkd','mkdn','mark']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['toml','md','mdwn','mkd','mkdn','mark']
depends = ['context_filetype.vim']

[[plugins]] # プレビューをブラウザで開く
repo = 'tyru/open-browser.vim'
on_ft = 'md'
hook_add = '''
	" if filereadable('/proc/sys/fs/binfmt_misc/WSLInterop')
	"     " autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" substitute(expand("%:p"), '/mnt/c', 'c:/', '')<CR>
	"     autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" substitute(expand("%:p"), '\v/mnt/(.)', '\1:/', '')<CR>
	" else
	"     autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p :execute "OpenBrowser" expand("%:p")<CR>
	" endif
	autocmd vimrc BufNewFile,BufRead *.md nnoremap <buffer><Leader>p 
		\:execute "OpenBrowser" substitute(expand("%:p"), '\v/mnt/(.)', '\1:/', 'c')<CR>
'''

[[plugins]] # 画面の移動が便利になる
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
    " デフォルトのキーマッピングを無効に
    let g:EasyMotion_do_mapping = 0
    " f + 2文字 で画面全体を検索してジャンプ
    nmap se <plug>(easymotion-overwin-f2)
    " 検索時、大文字小文字を区別しない
    let g:EasyMotion_smartcase = 1
	let g:EasyMotion_use_migemo = 1
'''

[[plugins]] # undoを視覚的に
repo = 'sjl/gundo.vim'
hook_add = '''
	let g:gundo_prefer_python3 = 1
	nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]] # 指定した文字で整形
repo = 'junegunn/vim-easy-align'
on_event = 'VimEnter'
hook_add = '''
	" Start interactive EasyAlign in visual mode (e.g. vipga)
	xmap ga <Plug>(EasyAlign)
	" Start interactive EasyAlign for a motion/text object (e.g. gaip)
	nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # ドットコマンド対象を拡張
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'

[[plugins]] # 適切なカーソルラインのハイライト
repo = 'delphinus/vim-auto-cursorline'
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/fzf.vim'
on_event = 'VimEnter'
hook_add = '''
	command! -bang -nargs=? -complete=dir Files
	  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
	let g:fzf_layout = { 'down': '~40%' }
	nnoremap <silent> ,f :<C-u>Files<CR>
	nnoremap <silent> ,b :<C-u>Buffers<CR>
	nnoremap <silent> ,l :<C-u>BLines<CR>
	nnoremap <silent> ,h :<C-u>History<CR>
'''

[[plugins]] # 括弧関連便利になる
repo = 'tpope/vim-surround'
on_event = 'VimEnter'

[[plugins]] # 括弧などを入力したときの挙動をスマートに補完
repo = 'jiangmiao/auto-pairs'
on_event = 'VimEnter'

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'
on_event = 'VimEnter'

[[plugins]] # 検索を改善
repo = 'haya14busa/incsearch.vim'
on_event = 'VimEnter'
hook_add = '''
	map /  <Plug>(incsearch-forward)
	map ?  <Plug>(incsearch-backward)
	map g/ <Plug>(incsearch-stay)
'''

[[plugins]] # fuzzy検索
repo = 'haya14busa/incsearch-fuzzy.vim'
on_event = 'VimEnter'
depends = ['incsearch.vim']
hook_add = '''
	map z/ <Plug>(incsearch-fuzzy-/)
	map z? <Plug>(incsearch-fuzzy-?)
	map zg/ <Plug>(incsearch-fuzzy-stay)
'''

[[plugins]] # migemo検索
repo = 'haya14busa/incsearch-migemo.vim'
on_event = 'VimEnter'
depends = ['incsearch.vim']
hook_add = '''
	map s/ <Plug>(incsearch-migemo-/)
	map s? <Plug>(incsearch-migemo-?)
	map sg/ <Plug>(incsearch-migemo-stay)
'''
[[plugins]] # edit for fish
on_ft = ['fish']
repo = 'dag/vim-fish'

# [[plugins]]
# repo = 'Shougo/neco-vim'
# on_ft = ['vim']
# depends = ['deoplete.nvim']

[[plugins]] # matlab
repo = 'lazywei/vim-matlab'
on_ft = ['matlab']

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'
on_event = 'VimEnter'

[[plugins]]
repo = 'simeji/winresizer'
on_event = 'VimEnter'
hook_add = '''
	" リサイズ幅を1ずつに変更
    let g:winrisizer_vert_resize=1
	let g:winresizer_horiz_resize=1
'''

# NerdFont List{{{
# This list is useful for testing and choosing interesting symbols.
# Also it's more consistent with current fonts than codepoints shown in README.
# So, it may worth to add this to the wiki - I've opened issue just to ask is this appropriate. Probably it's better to put it on page with Nerd font loaded.
# 
# IEC Power Symbols (23FB-23FE,2B58)
# ⏻⏼⏽⏾⭘
# Font Awesome Extension (moved E000-E0A9 → E200-E2A9)
# 
# 
# 
# 
# 
# Powerline Extra Symbols (E0A0-E0A3 E0B0-E0BF E0C0-E0C8 E0CC-E0CF E0D0-E0D2 E0D4)
# 
# Devicons (moved E600-E6C5 → E700-E7C5)
# 
# 
# 
# 
# 
# Font Awesome (F000-F2E0 with holes)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# Octicons (2665,26A1, moved F000-F105 with holes → F400-F4A8, moved F27C → F67C)
# ♥⚡
# 
# 
# 
# 
# 
# Pomicons (E000-E00A)
# 
# Font Linux (moved F100-F115 with holes → F300-F313)
# 
# Seti-UI + Custom (E5FA-E62B)
# 
# 

