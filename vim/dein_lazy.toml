# 遅延実行されるプラグイン

[[plugins]] # 補完
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim','nvim-yarp', 'vim-hug-neovim-rpc']
on_event = 'VimEnter'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#max_list = 10000
'''
hook_post_source = '''
    imap <expr><BS> deoplete#smart_close_popup()."\<C-h>"
    function! Multiple_cursors_before()
        call deoplete#custom#buffer_option('auto_complete', v:false)
        let b:auto_cursorline_disabled = 1
    endfunction
    function! Multiple_cursors_after()
        call deoplete#custom#buffer_option('auto_complete', v:true)
        let b:auto_cursorline_disabled = 0
    endfunction
'''

[[plugins]] # use look cmd
repo = 'ujihisa/neco-look'
on_event = 'VimEnter'
hook_post_source='''
    call deoplete#custom#source('look', 'max_candidates', 10)
    call deoplete#custom#source('look', 'max_candidates', 10)
    call deoplete#custom#source('look', 'rank', 10)
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'Shougo/neco-syntax'
on_event = 'VimEnter'

[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets','context_filetype.vim']
on_event = 'InsertEnter'
on_ft = 'snippet'
hook_add = '''
    let g:neosnippet#snippets_directory = ['~/dotfiles/vim/mysnippet']
    let g:neosnippet#enable_completed_snippet = 1 " 関数スニペットを展開
    let g:neosnippet#expand_word_boundary = 0 " jump時に間違えて補完されないようにオフ
'''
hook_source = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    imap <expr><CR> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-y>" : "\<CR>"
    imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    call deoplete#custom#source('neosnippet', 'rank', 510)
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['c', 'cpp', 'python', 'vim', 'javascript']
depends = ['async.vim', 'deoplete-vim-lsp']
hook_add = '''
    let g:lsp_async_completion = 1
    if executable('clangd-6.0')
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd-6.0']},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
            \ })
    endif
    if executable('pyls')
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info->['pyls']},
            \ 'whitelist': ['python', 'py'],
            \ 'workspace_config': {'pyls': {
                \ 'plugins': {
                    \ 'black': {'enabled': v:true},
                    \ 'yapf': {'enabled': v:false},
                    \ 'pyflakes': {'enabled': v:false},
                    \ 'pydocstyle': {'enabled': v:false},
                    \ 'pycodestyle': {'enabled': v:false},
                    \ 'pylint': {'enabled': v:true}}}},
        \ })
        autocmd vimrc FileType python call s:configure_lsp()
    endif
    if executable('vint')
        autocmd User lsp_setup call lsp#register_server({
          \ 'name': 'efm-langserver',
          \ 'cmd': {server_info->['efm-langserver', '-c=~/dotfiles/config.yaml']},
          \ 'whitelist': ['vim'],
          \ })
    endif
    if executable('typescript-language-server')
        autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'whitelist': ['javascript', 'javascript.jsx']
        \ })
        autocmd vimrc FileType javascript call s:configure_lsp()
    endif
    function! s:configure_lsp() abort
        setlocal omnifunc=lsp#complete " オムニ補完を有効化
        nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
        nnoremap <buffer> gd :<C-u>LspDefinition<CR>
        nnoremap <buffer> gD :<C-u>LspDeclaration<CR>
        nnoremap <buffer> <Leader>gd :<C-u>LspDocumentDiagnostics<CR>
        " nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
        " nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
        nnoremap <buffer> K :<C-u>LspHover<CR>
        nnoremap <buffer> <Leader>grn :<C-u>LspRename<CR>
        nnoremap <buffer> <Leader>grf :<C-u>LspReferences<CR>
        nnoremap <buffer> ]e  :LspNextError<CR>
        nnoremap <buffer> [e  :LspPreviousError<CR>
        nnoremap <buffer> <Leader>gf :<C-u>LspDocumentFormatSync<CR>
        autocmd vimrc BufWritePre <buffer> silent LspDocumentFormatSync
    endfunction
    let g:lsp_signs_error = {'text': ''}
    let g:lsp_signs_warning = {'text': ''}
    let g:lsp_signs_information = {'text': ''}
    let g:lsp_signs_hint = {'text': ''}
    let g:lsp_diagnostics_echo_cursor = 1
'''

[[plugins]]
repo      = 'lighttiger2505/deoplete-vim-lsp'
on_source = 'vim-lsp'
depends = 'deoplete.nvim'
hook_source = '''
    call deoplete#custom#source('lsp', 'rank', 510)
'''

[[plugins]] # lspないやつ
repo = 'dense-analysis/ale'
on_ft = ["matlab"]
hook_add = '''
    let g:ale_echo_msg_error_str = nr2char(0xf421)
    let g:ale_echo_msg_warning_str = nr2char(0xf420)
    let g:ale_echo_msg_info_str = nr2char(0xf05a)
    let g:ale_sign_error = g:ale_echo_msg_error_str
    let g:ale_sign_warning = g:ale_echo_msg_warning_str
    let g:ale_statusline_format = [
    \ g:ale_echo_msg_error_str . ' %d',
    \ g:ale_echo_msg_warning_str . ' %d',
    \ nr2char(0xf4a1) . '  ']
    let g:ale_fix_on_save = 1
    let g:ale_sign_column_always = 1
    let g:ale_lint_on_text_changed = 0
    let g:ale_lint_on_insert_leave = 1
    let b:ale_linters = {
    \ 'matlab': ['mlint'],
    \}
    " let g:ale_fixers = {
    "\ 'javascript': ['prettier']
    "\ }
    autocmd vimrc FileType help,qf,man,ref let b:ale_enabled = 0
'''


[[plugins]] # TOMLのシンタックスハイライト
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # その場で実行できる
repo = 'thinca/vim-quickrun'
on_cmd = "QuickRun"
hook_add = '''
    set errorformat=%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
    let g:quickrun_config = {}
    let g:quickrun_config = {
        \ "_":{
        \ 'runner'    : 'job',
        \ 'runner/terminal/into':1,
        \ 'outputter' : 'quickfix',
        \ 'outputter/quickfix/into':1,
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ 'outputter/buffer/into':1,
        \ 'outputter/buffer/split'  :
        \ '%{winwidth(0) * 2 < winheight(0) * 5 ? winheight(0)/4 : "vertical"}',
        \ },
        \ 'markdown': {
        \ 'runner'    : 'vimscript',
        \ 'exec':'%c %a',
        \ 'command': ":call",
        \ 'args': 'My_opens()',
        \ 'outputter':'null',
        \ },
        \ 'html': {
        \ 'runner'    : 'vimscript',
        \ 'exec':'%c %a',
        \ 'command': ":call",
        \ 'args': 'My_opens()',
        \ 'outputter':'null',
        \ },
        \ 'matlab': {
        \ 'runner':"vimscript",
        \ 'exec':'%c %o',
        \ 'command': ':call',
        \ 'cmdopt': 'matlab#RunCurrentFile()'
        \ },
        \ }
    " qでquickfixを閉じる
    autocmd vimrc FileType qf nnoremap <silent><buffer>q :quit<CR>
    " normal or visual modeのとき <leader> + r で保存してからquickrunの実行
    let g:quickrun_no_default_key_mappings = 1
    nnoremap <leader>r :write<CR>:QuickRun -mode n<CR>
    nnoremap <leader>R :write<CR>:QuickRun -runner terminal<CR>
    xnoremap <leader>r :<C-U>write<CR>gv:QuickRun -mode v<CR>
    " <C-c> でquickrunを停止
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]] # csvを見やすく
repo = 'mechatroner/rainbow_csv'
on_ft ="csv"
hook_add = '''
    let g:disable_rainbow_hover = 1
'''

# ----カーソル位置のコンテキストに合わせてファイルタイプを切り替え----
[[plugins]] # 判定ライブラリ
repo = 'Shougo/context_filetype.vim'
on_ft = ['vim','toml','md','mdwn','mkd','mkdn','mark','python','html']
hook_add = '''
    function! My_context_on()
        let g:context_filetype#filetypes = {
        \ 'python' :[
        \ {
            \ 'start' : '=\s.\?"\{3}$',
            \ 'end': '"\{3}$',
            \ 'filetype' : 'html',
        \ },
        \ ],
        \}
    endfunction
    call My_context_on()
    function! My_context_off()
        let g:context_filetype#filetypes = {
        \ 'python' :[
        \ {
            \ 'start' : 'template = "\{3}',
            \ 'end': '"\{3}',
            \ 'filetype' : 'html',
        \ },
        \ ],
        \}
    endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['vim','toml','md','mdwn','mkd','mkdn','mark','python','html']
depends = ['context_filetype.vim']
hook_add = """
    let g:precious_enable_switchers = {'defx': {'setfiletype': 0}}
"""

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'xml', 'javascript']
hook_add = """
    let g:user_emmet_settings = {
    \ 'variables' : {
    \     'lang' : 'ja',
    \}}
"""

[[plugins]] # カラーコードの色表示
repo = 'ap/vim-css-color'
on_event = 'VimEnter'


# ----Markdownサポート----
[[plugins]] # Markdownの編集をサポート
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown','md','mdwn','mkd','mkdn','mark','python']
hook_add = '''
    let g:vim_markdown_folding_disabled=1
    let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]] # テーブルの生成を補助?
repo = 'godlygeek/tabular'
on_ft = ['markdown','md','mdwn','mkd','mkdn','mark','python']

[[plugins]] # テーブルの生成
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown','md','mdwn','mkd','mkdn','mark','python']
hook_add = '''
    let g:table_mode_corner='|'
    let g:table_mode_tableize_map = '<Leader>tb'
'''

[[plugins]] # markdown用のctags
repo = 'jszakmeister/markdown2ctags'
on_ft = ['vim','toml','md','mdwn','mkd','mkdn','mark','python']

[[plugins]] # vimのpluginのhelpとreadme.md自動生成
on_cmd = 'HelpIntoMarkdown'
repo = 'tsuyoshicho/vimhelpgenerator'

[[plugins]] # 画面の移動が便利になる
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
    " デフォルトのキーマッピングを無効に
    let g:EasyMotion_do_mapping = 0
    " f + 2文字 で画面全体を検索してジャンプ
    nmap ss <plug>(easymotion-overwin-f2)
    " 検索時、大文字小文字を区別しない
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_migemo = 1
'''

[[plugins]] # undoを視覚的に
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'
hook_add = '''
    let g:gundo_prefer_python3 = 1
    nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]] # 指定した文字で整形
repo = 'junegunn/vim-easy-align'
on_event = 'VimEnter'
hook_add = '''
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
    " コメントや文字列中でも有効化
    let g:easy_align_ignore_groups = []
'''

[[plugins]] # Camel _ のmotionを<leader>w b e geに対応
repo = 'bkad/CamelCaseMotion'
on_event = 'VimEnter'
hook_post_source = '''
    call camelcasemotion#CreateMotionMappings('<leader>')
'''

[[plugins]] # 適切なカーソルラインのハイライト
repo = 'delphinus/vim-auto-cursorline'
on_event = 'VimEnter'
hook_add = '''
    autocmd vimrc FileType defx :let b:auto_cursorline_disabled = 1
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]] # すごいやつ(語彙力)
repo = 'Shougo/denite.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc', 'neomru.vim']
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
hook_add = '''
    nnoremap <silent> ,fr :<C-u>Denite file/rec -auto-action=preview<CR>
    nnoremap <silent> ,fo :<C-u>Denite file_mru file/old -auto-action=preview<CR>
    nnoremap <silent> ,ft :<C-u>Denite filetype -start-filter<CR>
    nnoremap <silent> ,ch :<C-u>Denite command_history -start-filter<CR>
    nnoremap <silent> ,b :<C-u>Denite buffer -auto-action=preview<CR>
    nnoremap <silent> ,l :<C-u>Denite line -auto-action=preview -start-filter<CR>
    nnoremap <silent> ,j :<C-u>Denite jump -auto-action=preview<CR>
    nnoremap <silent> ,o :<C-u>Denite outline -auto-action=preview -start-filter<CR>
    nnoremap <silent> ,h :<C-u>Denite help -start-filter<CR>
    nnoremap <silent> ,me :<C-u>Denite menu -auto-action=preview<CR>
    nnoremap <silent> ,ma :<C-u>Denite mark -auto-action=preview<CR>
    nnoremap <silent> ,r :<C-u>Denite -resume<CR>
    nnoremap <silent> ,gg :<C-u>DeniteBufferDir grep -auto-action=preview<CR>
    nnoremap <silent> ,gw :<C-u>DeniteCursorWord grep -auto-action=preview<CR>
'''
hook_post_source = '''
    autocmd vimrc FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> <C-d>
        \ denite#do_map('move_up_path')
        nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> a
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> o
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
        nnoremap <silent><buffer><expr> <C-c>
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> sb
        \ denite#do_map('do_action', 'split')
        nnoremap <silent><buffer><expr> sv
        \ denite#do_map('do_action', 'vsplit')
        nnoremap <silent><buffer><C-n> j
        nnoremap <silent><buffer><C-p> k
    endfunction
    let s:menus = {}
    let s:menus.a_often_use = {'description':'often use commands'}
    let s:menus.a_often_use.command_candidates = [
        \ ['diffthis on', 'windo diffthis'],
        \ ['diff off', 'windo diffof'],
        \ ['on \"\"\" change html', ':call My_context_on()'],
        \ ['off \"\"\" change html', ':call My_context_off()'],
        \ ['setlocal filetype=python', 'setlocal filetype=python'],
        \ ['setlocal filetype=html', 'setlocal filetype=html'],
        \ ['setlocal filetype=xml', 'setlocal filetype=xml'],
        \ ]
    let s:menus.b_files = {'description':'files'}
    let s:menus.b_files.command_candidates = [
        \ ['dotfiles', "call denite#start([{'name': 'file/rec', 'args': ['~/dotfiles']}])"],
        \ ['my_plugins', "call denite#start([{'name': 'file/rec', 'args': ['~/.vim/my_plugins']}])"],
        \ ]
    let s:menus.c_dein = {'description':'Plugin management'}
    let s:menus.c_dein.command_candidates = [
        \ ['call dein#update()', 'call dein#update()'],
        \ ['call dein#recache_runtimepath()', 'call dein#recache_runtimepath()'],
        \ ['Denite dein', 'Denite dein'],
        \ ['echo dein#get_updates_log()', 'echo dein#get_updates_log()'],
        \ ['echo dein#get_log()', 'echo dein#get_log()'],
        \ ['clean nouse plugins', 'call map(dein#check_clean(), "delete(v:val, \"rf\")")'],
        \ ]
    let s:menus.d_good_help = {'description': 'good help'}
    let s:menus.d_good_help.command_candidates = [
        \ ['home', 'help '],
        \ ['eval', 'help eval'],
        \ ['ex-cmd-index', 'help ex-cmd-index'],
        \ ['function-list', 'help function-list'],
        \ ['functions', 'help functions'],
        \ ['help-summary', 'help help-summary'],
        \ ['index', 'help index'],
        \ ['quickref', 'help quickref'],
        \ ]
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ ['*~', '*.o', '*.exe', '*.bak',
        \ '.git/', '.ropeproject/', '__pycache__/', 'tmp/', 'var/', '.deprecated/',
        \ 'venv/', 'images/', '*.min.*', 'img/', 'fonts/', 'tags', '*.png', '*.bmp',
        \ '*.pdf', '*.docx', '*.xlsx'])
    call denite#custom#source('file/rec', 'matchers', ['matcher/ignore_globs'])
    call denite#custom#var('grep', 'command', ['jvgrep'])
    call denite#custom#var('grep', 'default_opts', ['-i'])
    call denite#custom#var('grep', 'recursive_opts', ['-R'])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('menu', 'menus', s:menus)
'''

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'
on_event = 'VimEnter'

[[plugins]] # matlab
repo = 'lazywei/vim-matlab'
on_ft = ['matlab']

[[plugins]] # matlab
repo = 'eetann/matlab-screen'
on_ft = ['matlab']
hook_add = '''
    let g:matlab_term_cmd='matlab -nodesktop -nosplash -softwareopengl'
    let g:matlab_screen_default_mapping = 0
    " vnoremap <Leader>r  :call matlab#RunSelected()<CR>
    " call matlab#RunCurrentFileはquickrunの<leader>r
    " nnoremap <Leader>mR  :call matlab#RunCell()<CR>
    nnoremap <Leader>md  :call matlab#GetDoc()<CR>
    nnoremap <Leader>mb  :call matlab#SetBreak()<CR>
    nnoremap <Leader>mv  :call matlab#WatchVarible()<CR>
    nnoremap <Leader>mf  :call matlab#OpenCurrentFile()<CR>
    nnoremap <Leader>mw  :call matlab#OpenWorkspace()<CR>
    nnoremap <Leader>mc  :call matlab#ClearVariables()<CR>
    nnoremap <Leader>ms  :call matlab#GetVariableSize()<CR>
    nnoremap <Leader>mt  :call matlab#Toggle()<CR>
    " autocmd vimrc VimEnter *.m :call matlab#Start()
'''

[[plugins]] # matlab
repo = '~/.vim/my_plugins/deoplete-matlab'
on_ft = ['matlab']

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'
on_event = 'VimEnter'

[[plugins]]
repo = 'simeji/winresizer'
on_event = 'VimEnter'
hook_post_source = '''
    " リサイズ幅を1ずつに変更
    let g:winrisizer_vert_resize=1
    let g:winresizer_horiz_resize=1
'''

[[plugins]] # defx icons
repo = 'kristijanhusak/defx-icons'
on_cmd = 'Defx'
hook_add = '''
    let g:defx_icons_enable_syntax_highlight = 0
    let g:defx_icons_column_length = 1
    let g:defx_icons_directory_icon = '+'
    let g:defx_icons_root_opendtree_icon = '+'
    let g:defx_icons_nested_opened_tree_icon = '-'
    let g:defx_icons_nested_closed_tree_icon = '+'
'''

[[plugins]] # file explorer
repo = 'Shougo/defx.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc','defx-icons']
on_cmd = 'Defx'
hook_add = '''
    " windowが編集ファイル以外だけになったら違うバッファへ
    autocmd vimrc WinEnter * call s:move_buffer_for_defx()
    function! s:move_buffer_for_defx() abort
        if &ft == 'defx' && winnr('$') == 1
            q
            bprevious
            let s:win_id = win_getid()
            Defx -split=vertical -columns=icons:indent:filename:type
            \ -winwidth=30  -direction=topleft
            let succeed = win_gotoid(s:win_id)
            " TODO: bufnrだと、隠しバッファ状態でも検知してしまう
            " TODO: defxではなくTagbarで2つの状態のときも検知したい
        elseif winnr('$') == 2 && &ft == 'defx' && bufnr('Tagbar')!=-1
            q
            TagbarClose
            bprevious
            let s:win_id = win_getid()
            Defx -split=vertical -columns=icons:indent:filename:type
            \ -winwidth=30  -direction=topleft
            TagbarOpen
            let succeed = win_gotoid(s:win_id)
        elseif &ft == 'Tagbar' && winnr('$') == 1
            TagbarClose
            bprevious
            TagbarOpen
        end
    endfunction
    nnoremap <silent> <Space>f
    \ :<C-u>Defx -split=vertical -columns=icons:indent:filename:type
        \ -winwidth=30 -direction=topleft -toggle<CR>
'''
hook_source = '''
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ defx#is_directory() ?
            \ defx#do_action('open_or_close_tree') :
            \ defx#do_action('drop')
        nnoremap <silent><buffer><expr> o
        \ defx#do_action('open')
        nnoremap <silent><buffer><expr> l
        \ defx#is_opened_tree() ?
            \ defx#do_action('open') :
            \ defx#is_directory() ?
                \ defx#do_action('open_tree') :
                \ ((&columns > 150) ?
                    \ defx#do_action('drop'):
                    \ defx#do_action('multi', ['drop', 'quit']))
        nnoremap <silent><buffer><expr> L
        \ defx#is_directory() ?
            \ defx#do_action('open') :
            \ defx#do_action('drop')
        nnoremap <silent><buffer><expr> sb
        \ defx#do_action('multi', [['drop', 'split'], 'quit'])
        nnoremap <silent><buffer><expr> sv
        \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
        nnoremap <silent><buffer><expr> p
        \ defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> S
        \ defx#do_action('toggle_sort', 'extension')
        nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> h
        \ defx#is_opened_tree() ?
            \ defx#do_action('close_tree') :
            \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> H
        \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
        nnoremap <silent><buffer><expr> cd
        \ defx#do_action('change_vim_cwd')
    endfunction
'''
# NerdFont # This list is useful for testing and choosing interesting symbols.
# Also it's more consistent with current fonts than codepoints shown in README.
# So, it may worth to add this to the wiki - I've opened issue just to ask is this appropriate. Probably it's better to put it on page with Nerd font loaded.
#
# IEC Power Symbols (23FB-23FE,2B58)
# ⏻⏼⏽⏾⭘
# Font Awesome Extension (moved E000-E0A9 → E200-E2A9)
# 
# 
# 
# 
# 
# Powerline Extra Symbols (E0A0-E0A3 E0B0-E0BF E0C0-E0C8 E0CC-E0CF E0D0-E0D2 E0D4)
# 
# Devicons (moved E600-E6C5 → E700-E7C5)
# 
# 
# 
# 
# 
# Font Awesome (F000-F2E0 with holes)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# Octicons (2665,26A1, moved F000-F105 with holes → F400-F4A8, moved F27C → F67C)
# ♥⚡
# 
# 
# 
# 
# 
# Pomicons (E000-E00A)
# 
# Font Linux (moved F100-F115 with holes → F300-F313)
# 
# Seti-UI + Custom (E5FA-E62B)
# 
# 

