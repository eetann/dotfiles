[[plugins]] # コメントアウトに便利
repo = 'tyru/caw.vim'
on_map = ['<Plug>(caw:']
hook_add = '''
    let g:caw_dollarpos_sp_left=' '
    " TODO: コメントアウト時にカーソル位置を移動しない
    nmap gc     <Plug>(caw:prefix)
    xmap gc     <Plug>(caw:prefix)
    nmap gcc    <Plug>(caw:hatpos:toggle)
    xmap gcc    <Plug>(caw:hatpos:toggle)
    nmap gci    <Plug>(caw:hatpos:comment)
    nmap gcui   <Plug>(caw:hatpos:uncomment)
    nmap gcI    <Plug>(caw:zeropos:comment)
    nmap gcuI   <Plug>(caw:zeropos:uncomment)
    nmap gca    <Plug>(caw:dollarpos:comment)
    nmap gcua   <Plug>(caw:dollarpos:uncomment)
    xmap gcw    <Plug>(caw:wrap:comment)
    nmap gco    <Plug>(caw:jump:comment-next)
    nmap gcO    <Plug>(caw:jump:comment-prev)
    nmap gct    <Plug>(caw:jump:comment-next)TODO:<Space>
    nmap gcT    <Plug>(caw:jump:comment-prev)TODO:<Space>
    nnoremap gcl :vimgrep /TODO:/j %<CR>
'''

[[plugins]] # プレビューをブラウザで開く
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
on_cmd = "OpenBrowser"
hook_add = '''
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>p
		\ :execute "OpenBrowser http://localhost:8000/" . expand('%')<CR>
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>cp
		\ :term ++rows=5 cmd.exe /c python server.py
	let g:netrw_nogx = 1 " disable netrw's gx mapping.
	nmap gx <Plug>(openbrowser-smart-search)
	vmap gx <Plug>(openbrowser-smart-search)
	function! My_opens()
		execute 'OpenBrowser ' . substitute(expand('%:p'), '\v/mnt/(.)', '\1:/', 'c')
	endfunction
'''

[[plugins]] # その場で実行できる
repo = 'thinca/vim-quickrun'
on_cmd = "QuickRun"
hook_add = '''
    set errorformat=%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
    let g:quickrun_config = {}
    let g:quickrun_config = {
        \ "_":{
        \ 'runner'    : 'job',
        \ 'runner/terminal/into':1,
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ 'outputter/buffer/into':1,
        \ 'outputter/buffer/split'  :
            \ '%{winwidth(0) * 2 < winheight(0) * 5 ? winheight(0)/4 : "vertical"}',
        \ 'outputter/quickfix/into':1,
        \ },
        \ 'markdown': {
        \ 'runner'    : 'vimscript',
        \ 'exec':'%c %a',
        \ 'command': ":call",
        \ 'args': 'My_opens()',
        \ 'outputter':'null',
        \ },
        \ 'html': {
        \ 'runner'    : 'vimscript',
        \ 'exec':'%c %a',
        \ 'command': ":call",
        \ 'args': 'My_opens()',
        \ 'outputter':'null',
        \ },
        \ 'tex': {
        \ 'command': 'latexmk',
        \ 'args':'-pvc',
        \ 'exec':'%c %a %s',
        \ },
        \ }
    " qでquickfixを閉じる
    autocmd vimrc FileType qf nnoremap <silent><buffer>q :quit<CR>
    " normal or visual modeのとき <leader> + r で保存してからquickrunの実行
    let g:quickrun_no_default_key_mappings = 1
    nnoremap <leader>r :write<CR>:QuickRun -mode n<CR>
    nnoremap <leader>R :write<CR>:QuickRun -runner terminal<CR>
    xnoremap <leader>r :<C-U>write<CR>gv:QuickRun -mode v<CR>
    " <C-c> でquickrunを停止
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
    command! -nargs=+ -complete=command Capture QuickRun -type vim -src <q-args>
    " Capture messages
    " Capture scriptnames
'''

[[plugins]]
repo = 'mattn/vim-sonictemplate'
on_cmd = ['Tem', 'Template']
hook_add = '''
    let g:sonictemplate_vim_template_dir = ['~/dotfiles/vim/template']
'''

[[plugins]] # Camel _ のmotionを<leader>w b e geに対応
repo = 'bkad/CamelCaseMotion'
on_map = ['<Plug>CamelCaseMotion']
hook_add = '''
    map <silent> <leader>w <Plug>CamelCaseMotion_w
    map <silent> <leader>b <Plug>CamelCaseMotion_b
    map <silent> <leader>e <Plug>CamelCaseMotion_e
    map <silent> <leader>ge <Plug>CamelCaseMotion_ge
'''

[[plugins]] # 適切なカーソルラインのハイライト
repo = 'delphinus/vim-auto-cursorline'
on_event = 'VimEnter'
hook_add = '''
    autocmd vimrc FileType defx :let b:auto_cursorline_disabled = 1
    autocmd vimrc FileType css :let b:auto_cursorline_disabled = 1
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_event = 'VimEnter'
hook_source = '''
    let g:fzf_layout = {'window': { 'width': 0.9, 'height': 0.8 } }
    command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, 
    \ fzf#vim#with_preview({'options': ['--layout=reverse']}), <bang>0)
    nnoremap sf :Files<CR>
    nnoremap sb :Buffers<CR>
    command! -bang Dotfiles
    \ call fzf#vim#files('~/dotfiles',
    \ fzf#vim#with_preview(
    \ {'source':'find . -type f -not -path "*/\.git/*" | sed "s/^\.\///"',
    \ 'options': ['--layout=reverse', '--preview', '~/.vim /fzf.vim/bin/preview.sh']}), <bang>0)
    nnoremap <F6> :Dotfiles<CR>
    " 登録したいコマンド
    " echo expand("%:p")
'''

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'
on_event = 'VimEnter'

# [[plugins]]
# repo = '~/.vim/my_plugins/foldppp'
# on_cmd = 'Foldppp'
# on_map = '<Plug>(foldppp-show)'
# hook_add = '''
#     nmap <leader>s <Plug>(foldppp-show)
# '''

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'
on_ft = ['help']

[[plugins]]
repo = 'simeji/winresizer'
on_event = 'WinEnter'
on_if = 'winnr("$") > 1'
hook_post_source = '''
    " リサイズ幅を1ずつに変更
    let g:winrisizer_vert_resize=1
    let g:winresizer_horiz_resize=1
'''
