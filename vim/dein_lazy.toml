# 遅延実行されるプラグイン

[[plugins]] # TOMLのシンタックスハイライト
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # その場で実行できる
repo = 'thinca/vim-quickrun'
hook_add = '''
	let g:quickrun_config = {}
	set errorformat=%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
	let g:quickrun_config = {
		\ "_":{
		\ 'runner'    : 'vimproc',
		\ 'runner/vimproc/updatetime' : 60,
		\ 'runner/terminal/into':1,
	    \ 'outputter' : 'quickfix',
		\ 'outputter/quickfix/into':1,
	    \ 'outputter/error/success' : 'buffer',
	    \ 'outputter/error/error'   : 'quickfix',
		\ 'outputter/buffer/close_on_empty' : 1,
		\ 'outputter/buffer/into':1,
		\ 'outputter/buffer/split'  :
		\ '%{winwidth(0) * 2 < winheight(0) * 5 ? winheight(0)/4 : "vertical"}',
		\ },
		\ 'python': {
		\   'command': 'python3.7'
		\ },
		\ 'matlab': {
		\ 'runner':"shell",
		\ 'exec':'%c %o',
		\ 'command': '/mnt/c/Program Files/MATLAB/R2019a/bin/matlab.exe',
		\ 'cmdopt': '-nodesktop -nosplash -r "workspace, %:r, which(%:r)"'
		\ },
		\ }
		" splitは、以下を用いている
		" curly-braces-names(波括弧変数)で{}内を評価
		" expr2 ? expr1 : expr1 の式でexpr2が真なら前、偽なら後ろのexpr1を評価
		" https://vim-jp.org/vimdoc-ja/eval.html#expr1
		" \ 'markdown': {
		" \ 'runner'    : 'vimscript',
		" \ 'command': ":OpenBrowser",
		" \ 'args': "%{substitute(expand('%S:p'), '\v/mnt/(.)', '\1:/', 'c')}",
		" \ 'exec': "%c %a",
		" \ 'outputter':'null',
		" \ },
	" qでquickfixを閉じる
	autocmd vimrc FileType qf nnoremap <silent><buffer>q :quit<CR>
	" normal or visual modeのとき <leader> + r で保存してからquickrunの実行
	let g:quickrun_no_default_key_mappings = 1
	nnoremap <leader>r :write<CR>:QuickRun -mode n<CR>
	nnoremap <leader>R :write<CR>:QuickRun -runner terminal<CR>
	xnoremap <leader>r :<C-U>write<CR>gv:QuickRun -mode v<CR>
	" <C-c> でquickrunを停止
	nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

# ----カーソル位置のコンテキストに合わせてファイルタイプを切り替え----
[[plugins]] # 判定ライブラリ
repo = 'Shougo/context_filetype.vim'
on_ft = ['vim','toml','md','mdwn','mkd','mkdn','mark']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = ['vim','toml','md','mdwn','mkd','mkdn','mark']
depends = ['context_filetype.vim']

[[plugins]] # プレビューをブラウザで開く
repo = 'tyru/open-browser.vim'
on_ft = ['md', 'html','python']
hook_add = '''
	autocmd vimrc BufNewFile,BufRead *.html,*.md nnoremap <buffer><Leader>p
		\ :execute "OpenBrowser" substitute(expand('%:p'), '\v/mnt/(.)', '\1:/', 'c')<CR>
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>P
		\ :execute "OpenBrowser http://localhost:8000/" . expand('%')<CR>
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>cp
		\ :term ++rows=8 cmd.exe /c python server.py
'''

[[plugins]] # 画面の移動が便利になる
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
    " デフォルトのキーマッピングを無効に
    let g:EasyMotion_do_mapping = 0
    " f + 2文字 で画面全体を検索してジャンプ
    nmap se <plug>(easymotion-overwin-f2)
    " 検索時、大文字小文字を区別しない
    let g:EasyMotion_smartcase = 1
	let g:EasyMotion_use_migemo = 1
'''

[[plugins]] # undoを視覚的に
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'
hook_add = '''
	let g:gundo_prefer_python3 = 1
	nnoremap U :<C-u>GundoToggle<CR>
'''

[[plugins]] # 指定した文字で整形
repo = 'junegunn/vim-easy-align'
on_event = 'VimEnter'
hook_add = '''
	" Start interactive EasyAlign in visual mode (e.g. vipga)
	xmap ga <Plug>(EasyAlign)
	" Start interactive EasyAlign for a motion/text object (e.g. gaip)
	nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # ドットコマンド対象を拡張
repo = 'tpope/vim-repeat'
on_event = 'VimEnter'

[[plugins]] # 適切なカーソルラインのハイライト
repo = 'delphinus/vim-auto-cursorline'
on_event = 'VimEnter'
hook_add = '''
	autocmd vimrc FileType defx :let b:auto_cursorline_disabled = 1
'''

[[plugins]] 
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

[[plugins]] 
repo = 'neoclide/coc-denite'
on_source = 'denite.nvim'

[[plugins]] # すごいやつ(語彙力)
repo = 'Shougo/denite.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc','neoyank.vim','coc-denite']
on_event = 'VimEnter'
hook_add = '''
	nnoremap <silent> ,fr :<C-u>Denite file/rec -auto-action=preview<CR>
	nnoremap <silent> ,fo :<C-u>Denite file/old -auto-action=preview<CR>
	nnoremap <silent> ,ft :<C-u>Denite filetype -start-filter<CR>
	nnoremap <silent> ,ch :<C-u>Denite command_history -start-filter<CR>
	nnoremap <silent> ,b :<C-u>Denite buffer -auto-action=preview<CR>
	nnoremap <silent> ,d :<C-u>Denite coc-diagnostic -auto-action=preview<CR>
	nnoremap <silent> ,s :<C-u>Denite coc-symbols -auto-action=preview<CR>
	nnoremap <silent> ,l :<C-u>Denite line -auto-action=preview -start-filter<CR>
	nnoremap <silent> ,j :<C-u>Denite jump -auto-action=preview<CR>
	nnoremap <silent> ,o :<C-u>Denite outline -auto-action=preview -start-filter<CR>
	nnoremap <silent> ,h :<C-u>Denite help -start-filter<CR>
	nnoremap <silent> ,y :<C-u>Denite neoyank -start-filter<CR>
	nnoremap <silent> ,m :<C-u>Denite menu -auto-action=preview<CR>
	nnoremap <silent> ,r :<C-u>Denite -resume<CR>
		autocmd vimrc FileType denite call s:denite_my_settings()
		function! s:denite_my_settings() abort
			nnoremap <silent><buffer><expr> <CR>
			\ denite#do_map('do_action')
			nnoremap <silent><buffer><expr> d
			\ denite#do_map('do_action', 'delete')
			nnoremap <silent><buffer><expr> p
			\ denite#do_map('do_action', 'preview')
			nnoremap <silent><buffer><expr> q
			\ denite#do_map('quit')
			nnoremap <silent><buffer><expr> i
			\ denite#do_map('open_filter_buffer')
			nnoremap <silent><buffer><expr> <Space>
			\ denite#do_map('toggle_select').'j'
			inoremap <silent><buffer><expr> <C-c> 
			\ denite#do_map('quit')
			nnoremap <silent><buffer><expr> <C-c> 
			\ denite#do_map('quit')
			nnoremap <silent><buffer><expr> ss
			\ denite#do_map('do_action', 'split')
			nnoremap <silent><buffer><expr> sv
			\ denite#do_map('do_action', 'vsplit')
		endfunction
	let s:menus = {}
	let s:menus.dotfiles = {
		\ 'description': 'dotfiles'
		\ }
	let s:menus.dotfiles.file_candidates = [
		\ ['vim/.vimrc', '~/dotfiles/vim/.vimrc'],
		\ ['vim/dein.toml', '~/dotfiles/vim/dein.toml'],
		\ ['vim/dein_lazy.toml', '~/dotfiles/vim/dein_lazy.toml'],
		\ ['vim/VimCheatSheet.md', '~/dotfiles/vim/VimCheatSheet.md'],
		\ ['vim/coc-settings.json', '~/dotfiles/vim/coc-settings.json'],
		\ ['vim/flake8', '~/dotfiles/vim/flake8'],
		\ ['vim/pylintrc', '~/dotfiles/vim/pylintrc'],
		\ ['vim/matlab_from_vim.ahk', '~/dotfiles/vim/matlab_from_vim.ahk'],
		\ ['./README.md', '~/dotfiles/README.md'],
		\ ['./MakeWindowsLinks.bat', '~/dotfiles/MakeWindowsLinks.bat'],
		\ ['./likevim.ahk', '~/dotfiles/likevim.ahk'],
		\ ['./tmux.conf', '~/dotfiles/tmux.conf'],
		\ ['./tempmemo.md', '~/dotfiles/tempmemo.md'],
		\ ['./setup_fish.fish', '~/dotfiles/setup_fish.fish'],
		\ ['./ubuntu_setup.sh', '~/dotfiles/ubuntu_setup.sh'],
		\ ['fish/tm.fish', '~/dotfiles/fish/tm.fish'],
		\ ['fish/config.fish', '~/dotfiles/fish/config.fish'],
		\ ['fish/fish_user_key_bindings.fish', '~/dotfiles/fish/fish_user_key_bindings.fish'],
		\ ['mysnippet/toml.snip', '~/dotfiles/mysnippet/toml.snip'],
		\ ['mysnippet/markdown.snip', '~/dotfiles/mysnippet/markdown.snip'],
		\ ['wsl.conf', '~/dotfiles/wsl.conf'],
		\ ]
		let s:menus.dein = { 'description': 'Plugin management' }
		let s:menus.dein.command_candidates = [
		\   ['🐬 Dein: Plugins update 🔸:call dein#update()', 'call dein#update()'],
		\   ['🐬 Dein: Plugins rechash🔸:call dein#recache_runtimepath()', 'call dein#recache_runtimepath()'],
		\   ['🐬 Dein: Plugins List   🔸:Denite dein', 'Denite dein'],
		\   ['🐬 Dein: Update log     🔸:echo dein#get_updates_log()', 'echo dein#get_updates_log()'],
		\   ['🐬 Dein: Log            🔸:echo dein#get_log()', 'echo dein#get_log()'],
		\ ]
		let s:menus.good_help = {
		    \ 'description': 'good help'
		    \ }
		let s:menus.good_help.command_candidates = [
		    \ ['home', 'help '],
		    \ ['eval', 'help eval'],
		    \ ['ex-cmd-index', 'help ex-cmd-index'],
		    \ ['function-list', 'help function-list'],
		    \ ['functions', 'help functions'],
		    \ ['help-summary', 'help help-summary'],
		    \ ['index', 'help index'],
		    \ ['quickref', 'help quickref'],
		    \ ]
'''
hook_post_source = '''
	call denite#custom#option('default', 'prompt', '🐉 ')
	call denite#custom#option('search', 'prompt', '🔎 ')
	call denite#custom#var('grep', 'command', ['jvgrep'])
	call denite#custom#var('grep', 'default_opts', ['-i'])
	call denite#custom#var('grep', 'recursive_opts', ['-R'])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', [])
	call denite#custom#var('grep', 'final_opts', [])
	call denite#custom#var('menu', 'menus', s:menus)
'''

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'
on_event = 'VimEnter'

[[plugins]] # 検索を改善
repo = 'haya14busa/incsearch.vim'
on_event = 'VimEnter'
hook_add = '''
	map /  <Plug>(incsearch-forward)
	map ?  <Plug>(incsearch-backward)
	map g/ <Plug>(incsearch-stay)
'''

[[plugins]] # fuzzy検索
repo = 'haya14busa/incsearch-fuzzy.vim'
on_event = 'VimEnter'
depends = ['incsearch.vim']
hook_add = '''
	map z/ <Plug>(incsearch-fuzzy-/)
	map z? <Plug>(incsearch-fuzzy-?)
	map zg/ <Plug>(incsearch-fuzzy-stay)
'''

[[plugins]] # migemo検索
repo = 'haya14busa/incsearch-migemo.vim'
on_event = 'VimEnter'
depends = ['incsearch.vim']
hook_add = '''
	map s/ <Plug>(incsearch-migemo-/)
	map s? <Plug>(incsearch-migemo-?)
	map sg/ <Plug>(incsearch-migemo-stay)
'''
[[plugins]] # edit for fish
on_ft = ['fish']
repo = 'dag/vim-fish'

[[plugins]] # matlab
repo = 'lazywei/vim-matlab'
on_ft = ['matlab']

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'
on_event = 'VimEnter'

[[plugins]]
repo = 'simeji/winresizer'
on_event = 'VimEnter'
hook_add = '''
	" リサイズ幅を1ずつに変更
    let g:winrisizer_vert_resize=1
	let g:winresizer_horiz_resize=1
'''

# NerdFont List{{{
# This list is useful for testing and choosing interesting symbols.
# Also it's more consistent with current fonts than codepoints shown in README.
# So, it may worth to add this to the wiki - I've opened issue just to ask is this appropriate. Probably it's better to put it on page with Nerd font loaded.
# 
# IEC Power Symbols (23FB-23FE,2B58)
# ⏻⏼⏽⏾⭘
# Font Awesome Extension (moved E000-E0A9 → E200-E2A9)
# 
# 
# 
# 
# 
# Powerline Extra Symbols (E0A0-E0A3 E0B0-E0BF E0C0-E0C8 E0CC-E0CF E0D0-E0D2 E0D4)
# 
# Devicons (moved E600-E6C5 → E700-E7C5)
# 
# 
# 
# 
# 
# Font Awesome (F000-F2E0 with holes)
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# Octicons (2665,26A1, moved F000-F105 with holes → F400-F4A8, moved F27C → F67C)
# ♥⚡
# 
# 
# 
# 
# 
# Pomicons (E000-E00A)
# 
# Font Linux (moved F100-F115 with holes → F300-F313)
# 
# Seti-UI + Custom (E5FA-E62B)
# 
# 

