[[plugins]] # snippet
repo = 'honza/vim-snippets'
on_event = 'VimEnter'

[[plugins]] # snippet
repo = 'SirVer/ultisnips'
on_event = 'VimEnter'
hook_add = '''
    let g:UltiSnipsSnippetDirectories = ["~/dotfiles/vim/mysnippet"]
    " let g:ulti_expand_or_jump_res = 0 "default value, just set once
    " function! Ulti_ExpandOrJump_and_getRes()
    "     call UltiSnips#ExpandSnippet()
    "     return g:ulti_expand_res
    " endfunction
    " inoremap <C-k> <C-R>=(Ulti_ExpandOrJump_and_getRes() > 0)?"":deoplete#close_popup()<CR>
'''


[[plugins]] # 補完とLSP
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
on_event = 'VimEnter'
hook_add = '''
    set updatetime=300
    let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-highlight',
    \ 'coc-word',
    \ 'coc-snippets',
    \ 'coc-ultisnips',
    \ 'coc-css',
    \ 'coc-html',
    \ 'coc-tsserver',
    \ 'coc-emmet',
    \ 'coc-vimlsp',
    \ 'coc-vimtex',
    \ ]
    let g:airline#extensions#coc#error_symbol =  ""
    let g:airline#extensions#coc#warning_symbol = ""
    let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
    let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
    let g:coc_start_at_startup = 1
    let g:coc_config_home = $HOME.'/dotfiles/vim'
'''
hook_source = '''
    command! -nargs=0 Format :call CocAction('format')
    highlight link CocHighlightText GruvboxBlueSign
    autocmd vimrc CursorHold * silent call CocActionAsync('highlight')
    autocmd vimrc User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    nnoremap <F10> :<C-u>CocConfig<CR>
    inoremap <C-g> <C-o>:call CocActionAsync('showSignatureHelp')<CR>
    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gD <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nmap <F2> <Plug>(coc-rename)
    if has('patch8.1.1068')
        " Use `complete_info` if your (Neo)Vim version supports it.
        inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
        imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction
    omap iF <Plug>(coc-funcobj-i)
    omap aF <Plug>(coc-funcobj-a)
    vmap iF <Plug>(coc-funcobj-i)
    vmap aF <Plug>(coc-funcobj-a)
    imap <silent><expr> <C-k>
    \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
    \ pumvisible() ? coc#_select_confirm() :
    \ coc#refresh()
    smap <silent><expr> <C-k>
    \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
    \ pumvisible() ? coc#_select_confirm() :
    \ coc#refresh()
    let g:coc_snippet_next =  '<c-k>'
    let g:coc_snippet_prev = '<s-tab>'
'''
