[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
    let g:asyncomplete_auto_popup = 1
    let g:asyncomplete_popup_delay = 0
    " 補完開始
    imap <C-g> <Plug>(asyncomplete_force_refresh)
    augroup asynctomplete_setup
      autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
         \   'name': 'neosnippet',
         \   'whitelist': ['*'],
         \   'completor': function('asyncomplete#sources#neosnippet#completor'),
         \ }))
      autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necosyntax#get_source_options({
          \   'name': 'necosyntax',
          \   'whitelist': ['*'],
          \   'blacklist': ['python'],
          \   'completor': function('asyncomplete#sources#necosyntax#completor'),
          \ }))
      autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
          \   'name': 'necovim',
          \   'whitelist': ['vim'],
          \   'completor': function('asyncomplete#sources#necovim#completor'),
          \ }))
      autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
         \   'name': 'omni',
         \   'whitelist': ['*'],
         \   'blacklist': ['c', 'cpp', 'html'],
         \   'completor': function('asyncomplete#sources#omni#completor')
         \  }))
      autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
          \   'name': 'buffer',
          \   'whitelist': ['*'],
          \   'blacklist': ['go'],
          \   'completor': function('asyncomplete#sources#buffer#completor'),
          \   'config': {
          \      'max_buffer_size': 5000000,
          \    },
          \ }))
    augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'

[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets','context_filetype.vim']
hook_add = '''
    let g:neosnippet#snippets_directory = ['~/dotfiles/vim/mysnippet']
    let g:neosnippet#enable_completed_snippet = 1 " 関数スニペットを展開
    let g:neosnippet#expand_word_boundary = 0 " jump時に間違えて補完されないようにオフ
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necosyntax.vim'
depends = ['neco-syntax']

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necovim.vim'
depends = ['neco-vim']

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'yami-beta/asyncomplete-omni.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = 0

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['async.vim']
hook_add = '''
    let g:lsp_async_completion = 1
    " let g:lsp_text_edit_enable = 0
    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        setlocal signcolumn=yes
        nmap <buffer> gd <plug>(lsp-definition)
        nmap <buffer> <f2> <plug>(lsp-rename)
    endfunction
    augroup lsp_install
        au!
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'mattn/vim-lsp-icons'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]] # tagジャンプ
repo = 'majutsushi/tagbar'
on_cmd = 'TagbarToggle'
hook_add = '''
	let g:tagbar_width = 30
	let g:tagbar_sort = 0
	let g:tagbar_map_togglesort = 'S'
	nnoremap <silent> <leader>tt :TagbarToggle<CR>
	let g:tagbar_type_markdown = {
		\ 'ctagstype': 'markdown',
		\ 'ctagsbin' : $HOME . '/.vim/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
		\ 'ctagsargs' : '-f - --sort=yes',
		\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
		\ ],
		\ 'sro' : '|',
		\ 'kind2scope' : {
		\ 's' : 'section',
		\ },
		\ 'sort': 0,
		\ }
'''
