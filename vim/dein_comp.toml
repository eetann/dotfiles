[[plugins]]
repo = 'prabirshrestha/async.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_event = 'VimEnter'
depends = ['async.vim']
hook_add = '''
augroup LspPython
  if executable('pyls')
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ 'workspace_config': {'pyls': {'plugins': {
        \   'pycodestyle': {'enabled': v:false},
        \   'jedi_definition': {'follow_imports': v:true, 'follow_builtin_imports': v:true},}}}
        \ })
    autocmd FileType python call <SID>configure_lsp()
  endif
augroup END
function! s:configure_lsp() abort
  setlocal omnifunc=lsp#complete
  nnoremap <buffer> <silent> K          :<C-u>LspHover<CR>
  nnoremap <buffer> <silent> <C-]>      :<C-u>LspDefinition<CR>
  " Windowsだと、うまく動かない？
  "nnoremap <buffer> <silent> gr         :<C-u>LspRename<CR>
  " エラー箇所に移動
  " :help <M-
  nmap <buffer> <silent> <M-k>      :<C-u>LspPreviousError<CR>
  nmap <buffer> <silent> <M-j>      :<C-u>LspNextError<CR>
endfunction
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
on_event = 'VimEnter'
hook_source = '''
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_popup_delay = 0
" 補完開始
imap <C-g> <Plug>(asyncomplete_force_refresh)
" close
inoremap <expr> <C-y> pumvisible() ? asyncomplete#close_popup() : "\<C-y>"
" calcel
inoremap <expr> <C-e> pumvisible() ? asyncomplete#cancel_popup() : "\<C-e>"
augroup asynctomplete_setup
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
      \   'name': 'neosnippet',
      \   'whitelist': ['*'],
      \   'completor': function('asyncomplete#sources#neosnippet#completor'),
      \ }))
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necosyntax#get_source_options({
      \   'name': 'necosyntax',
      \   'whitelist': ['*'],
      \   'blacklist': ['python'],
      \   'completor': function('asyncomplete#sources#necosyntax#completor'),
      \ }))
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
      \   'name': 'necovim',
      \   'whitelist': ['vim'],
      \   'completor': function('asyncomplete#sources#necovim#completor'),
      \ }))
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
      \   'name': 'omni',
      \   'whitelist': ['*'],
      \   'blacklist': ['c', 'cpp', 'html'],
      \   'completor': function('asyncomplete#sources#omni#completor')
      \  }))
  autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \   'name': 'buffer',
      \   'whitelist': ['*'],
      \   'blacklist': ['go'],
      \   'completor': function('asyncomplete#sources#buffer#completor'),
      \   'config': {
      \      'max_buffer_size': 5000000,
      \    },
      \ }))
augroup END
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['vim-lsp']
on_source = ['asyncomplete.vim']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['neosnippet.vim']
on_source = ['asyncomplete.vim']

[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets','context_filetype.vim']
on_source = ['asyncomplete-neosnippet.vim']
on_ft = 'snippet'
hook_add = '''
    let g:neosnippet#snippets_directory = ['~/dotfiles/vim/mysnippet']
    let g:neosnippet#enable_completed_snippet = 1 " 関数スニペットを展開
    let g:neosnippet#expand_word_boundary = 0 " jump時に間違えて補完されないようにオフ
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necosyntax.vim'
on_source = ['asyncomplete.vim']
depends = ['neco-syntax']

[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = ['asyncomplete-necosyntax.vim']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-necovim.vim'
on_source = ['asyncomplete.vim']
depends = ['neco-vim']

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']

[[plugins]]
repo = 'yami-beta/asyncomplete-omni.vim'
on_source = ['asyncomplete.vim']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
on_source = ['asyncomplete.vim']

[[plugins]] # tagジャンプ
repo = 'majutsushi/tagbar'
on_cmd = 'TagbarToggle'
hook_add = '''
	let g:tagbar_width = 30
	let g:tagbar_sort = 0
	let g:tagbar_map_togglesort = 'S'
	nnoremap <silent> <leader>tt :TagbarToggle<CR>
	let g:tagbar_type_markdown = {
		\ 'ctagstype': 'markdown',
		\ 'ctagsbin' : $HOME . '/.vim/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
		\ 'ctagsargs' : '-f - --sort=yes',
		\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
		\ ],
		\ 'sro' : '|',
		\ 'kind2scope' : {
		\ 's' : 'section',
		\ },
		\ 'sort': 0,
		\ }
'''
