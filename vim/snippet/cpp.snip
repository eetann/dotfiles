snippet     meta
abbr        meta
options     head
    /*
     * ${1:`expand('%:t')`}
     *
     *  ${2:Created on: `strftime("%Y/%m/%d")`}
     *      ${3:Author:} ${4:name}
     */
    ${5:}

snippet     using
abbr        using namespace std;
options     head
    using namespace std;

snippet     qmain
abbr        int main() { hoge }
options     head
    int main() {
        ${1:hoge}
    }

snippet     mainq
abbr        int main() { hoge }
options     head
    int main() {
        ${1:hoge}
    }

snippet     cq
abbr        << ""
options     word
    << "${1:#:hoge}" ${2:#:use snippet my connect}

snippet     qc
abbr        << ""
options     word
    << "${1:#:hoge}" ${2:#:use snippet my connect}

snippet     coutq
abbr        cout << endl;
options     word
    cout << ${1:ans} ${2:#:use snippet my connect}${3:<< endl};${0}

snippet     qcout
abbr        cout << endl;
options     word
    cout << ${1:ans} ${2:#:use snippet my connect}${3:<< endl};${0}

snippet     cin
abbr        cin >>;
options     head
    cin >> ${1};${0}

snippet     qtypedefstruct
abbr        typedef struct
options     head
    typedef struct ${1:#:name of struct}{
        ${0:TARGET}
    }${2:#:name of type};

snippet     typedefstructq
abbr        typedef struct
options     head
    typedef struct ${1:#:name of struct}{
        ${0:TARGET}
    }${2:#:name of type};

snippet     qq
abbr        =;
options     word
     ${1:} = ${2:};${0:}

snippet     qclass
abbr        class
options     head
    class ${1}: ${2} {
        ${3}
        public:
            $1(${4}): ${5} {}
            ${6}
    };

snippet     qvector
abbr        vector
options     head
    vector<${1}> ${2};

snippet     qvectorfor
abbr        for vector
options     head
    for (vector<${1}>::size_type ${2} = ${3}; $2 < ${4}; $2++) {
        ${0}
    }

snippet     qveccin
abbr        vector cin
options     head
    vector<int> ${1}(${2:N});
    for (int i = 0; i < $2; i++) {
        cin >> $1.at(i);
    }
    ${0}

snippet     qveccout
abbr        vector cout
options     head
    for (int i = 0, e=${1}.size(); i < e; i++) {
        cout << $1.at(i) << endl;
    }${0}

snippet     qfor
abbr        for (int i=0, e=end; i<e; i++)
options     head
    for (int i = 0, e=${1}.size(); i < e; i++) {
        ${0}
    }

snippet     digitsum
abbr        sum of digits
options     word
    int ${1:digit} = ${2:num};
    int ${3:d_sum} = 0;
    while ($1 > 0) {
        $3 += $1 % 10;
        $1 /= 10;
    }${0}
