# プラグインの管理
[[plugins]] # これ使うのに必要
repo = 'Shougo/dein.vim'

[[plugins]] # 非同期実行(vim-clang-formatに必要)
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # コメントアウトに便利
repo = 'tyru/caw.vim'
hook_add = '''
	let g:caw_dollarpos_sp_left=' '
	nmap gct <Plug>(caw:jump:comment-prev)TODO:<Space>
	nmap gcO <Plug>(caw:jump:comment-prev)
	nnoremap gcl :vimgrep /TODO:/j %<CR>
'''
[[plugins]] # 括弧関連便利になる
repo = 'tpope/vim-surround'
on_event = 'VimEnter'

[[plugins]] # 括弧などを入力したときの挙動をスマートに補完
repo = 'jiangmiao/auto-pairs'
on_event = 'VimEnter'

# ----Markdownサポート----
[[plugins]] # Markdownの編集をサポート
repo = 'plasticboy/vim-markdown'
on_ft = 'md'
hook_add = '''
	let g:vim_markdown_folding_disabled=1
	let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]] # テーブルの生成を補助?
repo = 'godlygeek/tabular'
on_ft = 'md'

[[plugins]] # テーブルの生成
repo = 'dhruvasagar/vim-table-mode'
on_ft = 'md'
hook_add = '''
	let g:table_mode_corner='|'
	let g:table_mode_tableize_map = '<Leader>tb'
'''

[[plugins]] # markdown用のctags
repo = 'jszakmeister/markdown2ctags'
on_ft = 'md'

[[plugins]] # tagジャンプ
repo = 'majutsushi/tagbar'
depends = ['markdown2ctags']
hook_add = '''
	let g:tagbar_width = 30
	let g:tagbar_sort = 0
	let g:tagbar_map_togglesort = 'S'
	let g:can_auto_opens_defx_tagbar = 1
	" nnoremap <Leader>ao :<C-u>call <SID>set_auto_opens_defx_tagbar()<CR>
	" function! s:set_auto_opens_defx_tagbar()
	" 	if g:can_auto_opens_defx_tagbar==1
	" 		g:can_auto_opens_defx_tagbar=0
	" 	else
	" 		g:can_auto_opens_defx_tagbar=1
	" 	endif
	" endfunction
	autocmd vimrc VimResized,VimEnter * call s:auto_open_tagbar()
	" ウィンドウ幅が大きいときはtagbarを開いておく。
	function! s:auto_open_tagbar() abort
		if g:can_auto_opens_defx_tagbar==1
			let s:is_opened_tagbar = bufwinid('Tagbar')
			if winwidth(0) >= 120 && s:is_opened_tagbar==-1
				" フォーカスは編集中のファイルに戻す
				let s:win_id = win_getid()
				TagbarOpen
				let succeed = win_gotoid(s:win_id)
			elseif winwidth(0) < 120 && s:is_opened_tagbar!=-1
				execute "bdelete" . winbufnr(s:is_opened_tagbar)
			endif
		endif
	endfunction
	nnoremap <silent> <leader>tt :TagbarToggle<CR>
	let g:tagbar_type_markdown = {
		\ 'ctagstype': 'markdown',
		\ 'ctagsbin' : $HOME . '/.vim/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
		\ 'ctagsargs' : '-f - --sort=yes',
		\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
		\ ],
		\ 'sro' : '|',
		\ 'kind2scope' : {
		\ 's' : 'section',
		\ },
		\ 'sort': 0,
		\ }
'''


[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'
hook_add = '''
	set background=dark
	autocmd vimrc VimEnter * nested colorscheme gruvbox
'''

[[plugins]] # インデントの深さを可視化(要tabstop&shiftwidth設定)
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_auto_colors = 0
	autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgrey
	autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=lightgrey
'''

[[plugins]] # nvim系に必要
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]] # nvim系に必要
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]] # defx icons
repo = 'kristijanhusak/defx-icons'
hook_add = '''
	let g:defx_icons_enable_syntax_highlight = 0
	" let g:defx_icons_column_length = 2
'''

[[plugins]] # file explorer
repo = 'Shougo/defx.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc','defx-icons']
hook_add = '''
	autocmd vimrc VimResized,VimEnter * call s:auto_open_defx()
	" ウィンドウ幅が大きいときはdefxを開いておく。
	function! s:auto_open_defx() abort
		if g:can_auto_opens_defx_tagbar==1
			" 現在のタブページ内でのウィンドウIDで開閉判定
			let s:is_opened_defx = bufwinid('defx')
			if winwidth(0) >= 150 && s:is_opened_defx==-1
				" フォーカスは編集中のファイルに戻す
				let s:win_id = win_getid()
				Defx -split=vertical -columns=mark:indent:icons:filename:type
				\ -winwidth=30  -direction=topleft
				let succeed = win_gotoid(s:win_id)
			elseif winwidth(0) < 150 && s:is_opened_defx!=-1
				execute 'bdelete' . winbufnr(s:is_opened_defx)
			endif
		endif
	endfunction
	" windowが編集ファイル以外だけになったら違うバッファへ
	autocmd vimrc WinEnter * call s:move_buffer_for_defx()
	function! s:move_buffer_for_defx() abort
		if &ft == 'defx' && winnr('$') == 1
			q
			buffer #
			call s:auto_open_defx()
		elseif &ft == 'defx' && winnr('$') == 2 && bufnr('Tagbar')!=-1
			q
			TagbarClose
			buffer #
			call s:auto_open_defx()
			call s:auto_open_tagbar()
		elseif &ft == 'Tagbar' && winnr('$') == 1
			TagbarClose
			buffer #
			call s:auto_open_tagbar()
		end
	endfunction
	nnoremap <silent> <Space>f
	\ :<C-u>Defx -split=vertical -columns=mark:indent:icons:filename:type
		\ -winwidth=30  -direction=topleft -toggle<CR>

	autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
		nnoremap <silent><buffer><expr> <CR>
		\ defx#is_directory() ?
		\ defx#do_action('open_or_close_tree') :
		\ defx#do_action('drop')
		nnoremap <silent><buffer><expr> o
		\ defx#do_action('open_or_close_tree')
		nnoremap <silent><buffer><expr> c
		\ defx#do_action('copy')
		nnoremap <silent><buffer><expr> m
		\ defx#do_action('move')
		nnoremap <silent><buffer><expr> p
		\ defx#do_action('paste')
		nnoremap <silent><buffer><expr> l
		\ defx#is_directory() ?
			\ defx#do_action('open') :
			\ ((&columns > 150) ?
			\ defx#do_action('drop'):
			\ defx#do_action('multi', ['drop', 'quit']))
		nnoremap <silent><buffer><expr> ss
		\ defx#do_action('multi', [['drop', 'split'], 'quit'])
		nnoremap <silent><buffer><expr> sv
		\ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
		nnoremap <silent><buffer><expr> P
		\ defx#do_action('open', 'pedit')
		nnoremap <silent><buffer><expr> O
		\ defx#do_action('open_or_close_tree')
		nnoremap <silent><buffer><expr> K
		\ defx#do_action('new_directory')
		nnoremap <silent><buffer><expr> N
		\ defx#do_action('new_file')
		nnoremap <silent><buffer><expr> M
		\ defx#do_action('new_multiple_files')
		nnoremap <silent><buffer><expr> C
		\ defx#do_action('toggle_columns',
		\                'mark:filename:type:size:time')
		nnoremap <silent><buffer><expr> S
		\ defx#do_action('toggle_sort', 'time')
		nnoremap <silent><buffer><expr> d
		\ defx#do_action('remove')
		nnoremap <silent><buffer><expr> r
		\ defx#do_action('rename')
		nnoremap <silent><buffer><expr> !
		\ defx#do_action('execute_command')
		nnoremap <silent><buffer><expr> x
		\ defx#do_action('execute_system')
		nnoremap <silent><buffer><expr> yy
		\ defx#do_action('yank_path')
		nnoremap <silent><buffer><expr> .
		\ defx#do_action('toggle_ignored_files')
		nnoremap <silent><buffer><expr> h
		\ defx#do_action('cd', ['..'])
		nnoremap <silent><buffer><expr> ~
		\ defx#do_action('cd')
		nnoremap <silent><buffer><expr> q
		\ defx#do_action('quit')
		nnoremap <silent><buffer><expr> <Space>
		\ defx#do_action('toggle_select') . 'j'
		nnoremap <silent><buffer><expr> *
		\ defx#do_action('toggle_select_all')
		nnoremap <silent><buffer><expr> j
		\ line('.') == line('$') ? 'gg' : 'j'
		nnoremap <silent><buffer><expr> k
		\ line('.') == 1 ? 'G' : 'k'
		nnoremap <silent><buffer><expr> <C-l>
		\ defx#do_action('redraw')
		nnoremap <silent><buffer><expr> <C-g>
		\ defx#do_action('print')
		nnoremap <silent><buffer><expr> cd
		\ defx#do_action('change_vim_cwd')
	endfunction
'''

# スニペット定義ファイル
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]] 
repo = 'honza/vim-snippets'

[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
on_ft = ['snippet']
depends = ['neosnippet-snippets','vim-snippets']
hook_add = '''
	imap <C-k> <Plug>(neosnippet_expand_or_jump)
	smap <C-k> <Plug>(neosnippet_expand_or_jump)
	xmap <C-k> <Plug>(neosnippet_expand_or_jump)
	let g:neosnippet#snippets_directory = ['~/dotfiles/mysnippet', '~/.vim/dein/repos/github.com/honza/vim-snippets/snippets']
	let g:neosnippet#enable_completed_snippet = 1
	let g:neosnippet#expand_word_boundary = 1
'''

[[plugins]] # LSP補完
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
hook_add = '''
	set signcolumn=yes
	set updatetime=300
	highlight link CocHighlightText GruvboxBlueSign
	autocmd CursorHold * silent call CocActionAsync('highlight')
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
	nnoremap <F10> :<C-u>CocConfig<CR>
	inoremap <silent><expr> <C-space> coc#refresh()
	" Use `[c` and `]c` for navigate diagnostics
	nmap <silent> [c <Plug>(coc-diagnostic-prev)
	nmap <silent> ]c <Plug>(coc-diagnostic-next)
	nmap <silent> <leader>gd <Plug>(coc-definition)
	nmap <silent> <leader>gD <Plug>(coc-type-definition)
	nmap <silent> <leader>gi <Plug>(coc-implementation)
	nmap <silent> <leader>gf <Plug>(coc-references)
	nmap <leader>gn <Plug>(coc-rename)
	let g:airline#extensions#coc#error_symbol =  ""
	let g:airline#extensions#coc#warning_symbol = ""
	let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
	let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
	let g:coc_global_extensions = ['coc-neosnippet', 'coc-syntax']
	let g:coc_start_at_startup=1
	" nnoremap <silent> <leader>gh :call CocAction('doHover')<CR>
	nnoremap <silent> K :call <SID>show_documentation()<CR>
	function! s:show_documentation()
	  if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	  else
		call CocAction('doHover')
	  endif
	endfunction
	" nnoremap <silent> <leader>gh :call My_hover()<CR>
	" function! My_hover() abort
	" 	" 関数の説明をpopupで表示
	" 	call CocAction('doHover')
	" 	if exists('g:coc_last_hover_message')
	" 		call popup_create(g:coc_last_hover_message,
	"		\ {'line':'cursor+2', 'col':'cursor',
	"			\ 'maxheight':150,'maxwidth':100,'border':[1,1,1,1],'moved':'any'})
	" 		unlet g:coc_last_hover_message
	" 	end
	" endfunction
'''


[[plugins]] # ステータスラインとバッファ表示の強化
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes','tagbar','vim-devicons','coc.nvim']
hook_add = '''
	" ステータスラインの表示内容強化
	set laststatus=2 " ステータスラインを常に表示
	set noshowmode   " 現在のモードを日本語表示しない
	set showcmd      " 打ったコマンドをステータスラインの下に表示
	set ruler        " ステータスラインの右側にカーソルの現在位置を表示する
	let g:airline_theme = 'powerlineish'
	let g:airline_powerline_fonts = 1
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline#extensions#wordcount#enabled = 0
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#formatter = 'unique_tail'
	let g:airline_left_sep =''
	let g:airline_left_alt_sep=''
	let g:airline_right_sep =''
	let g:airline_right_alt_sep=''
	let g:airline#extensions#default#layout = [
    \ [ 'a', 'b', 'c' ],
    \ [ 'x', 'y', 'z', 'warning' , 'error']]
    let g:airline#extensions#default#section_truncate_width = {
    \ 'b': 79,
    \ 'x': 60,
    \ 'y': 100,
    \ 'z': 45,
    \ 'warning': 80,
    \ 'error': 80,
    \ }
	let g:airline_section_z = '%3v:%l/%L %3p%%'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
