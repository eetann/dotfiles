# プラグインの管理
[[plugins]] # これ使うのに必要
repo = 'Shougo/dein.vim'

[[plugins]] # 非同期実行(vim-clang-formatに必要)
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # コメントアウトに便利
repo = 'scrooloose/nerdcommenter'
hook_add ='''
    let g:NERDSpaceDelims = 1
    let g:NERDDefaultAlign='left'
    let g:NERDCreateDefaultMappings = 0
    nmap <Leader>c<Space> <Plug>NERDCommenterToggle
    vmap <Leader>c<Space> <Plug>NERDCommenterToggle
    nmap <Leader>cA <Plug>NERDCommenterAppend
    " TODOコメント追加
    nmap <Leader>ctd <Plug>NERDCommenterAppendTODO:<Space>
    " TODOをlocation listとして開く
	nnoremap <Leader>tl :vimgrep /TODO:/j %<CR>:cwindow<CR>
	" TODO: 他のアノテーションも追加
'''

# ----Markdownサポート----
[[plugins]] # Markdownの編集をサポート
repo = 'plasticboy/vim-markdown'
on_ft = 'md'
hook_add = '''
	let g:vim_markdown_folding_disabled=1
	let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]] # テーブルの生成を補助?
repo = 'godlygeek/tabular'
on_ft = 'md'

[[plugins]] # テーブルの生成
repo = 'dhruvasagar/vim-table-mode'
on_ft = 'md'
hook_add = '''
	let g:table_mode_corner='|'
	let g:table_mode_tableize_map = '<Leader>tb'
'''

[[plugins]] # markdown用のctags
repo = 'jszakmeister/markdown2ctags'
on_ft = 'md'

[[plugins]] # tagジャンプ
repo = 'majutsushi/tagbar'
depends = ['markdown2ctags']
hook_add = '''
	autocmd vimrc VimResized,VimEnter * call s:auto_open_tagbar()
	" ウィンドウ幅が大きいときはtagbarを開いておく。
	function! s:auto_open_tagbar() abort
		let s:is_opened_tagbar = bufnr('Tagbar')
		if winwidth(0) >= 150 && s:is_opened_tagbar==-1
			" フォーカスは編集中のファイルに戻す
			let s:win_id = win_getid()
			TagbarOpen
			let succeed = win_gotoid(s:win_id)
		elseif winwidth(0) < 120 && s:is_opened_tagbar!=-1
			execute "bwipeout!" . s:is_opened_tagbar
		endif
	endfunction

	let g:tagbar_autofocus = 1
	let g:tagbar_width = 30
	let g:tagbar_map_togglesort = 'S'
	nnoremap <silent> <leader>tt :TagbarToggle<CR>
	let g:tagbar_type_markdown = {
		\ 'ctagstype': 'markdown',
		\ 'ctagsbin' : $HOME . '/.vim/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
		\ 'ctagsargs' : '-f - --sort=yes',
		\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
		\ ],
		\ 'sro' : '|',
		\ 'kind2scope' : {
		\ 's' : 'section',
		\ },
		\ 'sort': 0,
		\ }
'''

[[plugins]] # gitをvimで操作
repo = 'tpope/vim-fugitive'
hook_add = '''
	nnoremap [fugitive]  <Nop>
	nmap <space>g [fugitive]
	nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
	nnoremap <silent> [fugitive]a :Gwrite<CR>
	nnoremap <silent> [fugitive]c :Gcommit-v<CR>
	nnoremap <silent> [fugitive]b :Gblame<CR>
	nnoremap <silent> [fugitive]d :Gdiff<CR>
	nnoremap <silent> [fugitive]m :Gmerge<CR>
'''


[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'
hook_add = '''
	set background=dark
	autocmd vimrc VimEnter * nested colorscheme gruvbox
'''

[[plugins]] # 括弧関連便利になる
repo = 'tpope/vim-surround'

[[plugins]] # 括弧などを入力したときの挙動をスマートに補完
repo = 'jiangmiao/auto-pairs'

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'

[[plugins]] # インデントの深さを可視化(要tabstop&shiftwidth設定)
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_auto_colors = 0
	autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgrey
	autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=lightgrey
'''

[[plugins]] # 適切なカーソルラインのハイライト
repo = 'delphinus/vim-auto-cursorline'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
	command! -bang -nargs=? -complete=dir Files
	  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
	let g:fzf_layout = { 'down': '~40%' }
	nnoremap <silent> ,f :<C-u>Files<CR>
	nnoremap <silent> ,b :<C-u>Buffers<CR>
	nnoremap <silent> ,l :<C-u>BLines<CR>
	nnoremap <silent> ,h :<C-u>History<CR>
'''

[[plugins]] # 検索を改善
repo = 'haya14busa/incsearch.vim'
hook_add = '''
	let g:incsearch#auto_nohlsearch = 1
	map /  <Plug>(incsearch-forward)
	map ?  <Plug>(incsearch-backward)
	map g/ <Plug>(incsearch-stay)
'''

[[plugins]] # fuzzy検索
repo = 'haya14busa/incsearch-fuzzy.vim'
depends = ['incsearch.vim']
hook_add = '''
	map z/ <Plug>(incsearch-fuzzy-/)
	map z? <Plug>(incsearch-fuzzy-?)
	map zg/ <Plug>(incsearch-fuzzy-stay)
'''

[[plugins]] # migemo検索
repo = 'haya14busa/incsearch-migemo.vim'
depends = ['incsearch.vim']
hook_add = '''
	map s/ <Plug>(incsearch-migemo-/)
	map s? <Plug>(incsearch-migemo-?)
	map sg/ <Plug>(incsearch-migemo-stay)
'''

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'

[[plugins]] # nvim系に必要
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]] # nvim系に必要
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]] # LSP補完
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
hook_add = '''
	" set signcolumn=yes
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
	set shortmess+=c
'''

# snippets
[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'
depends = ['honza/vim-snippets']
hook_add = '''
	let g:UltiSnipsExpandTrigger="<c-k>"
	let g:UltiSnipsJumpForwardTrigger="<c-k>"
	let g:UltiSnipsJumpBackwardTrigger="<c-j>"
	" If you want :UltiSnipsEdit to split your window.
	let g:UltiSnipsEditSplit="vertical"
	" make vim recognizing snippets dir
	" use different snippets dir
	let g:UltiSnipsSnippetsDir='~/dotfiles/vim/mysnippets'
	" let g:UltiSnipsSnippetDirectories=["UltiSnips"]
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]] # ステータスラインとバッファ表示の強化
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes','tagbar','vim-devicons','coc.nvim']
hook_add = '''
	" ステータスラインの表示内容強化
	set laststatus=2 " ステータスラインを常に表示
	set noshowmode   " 現在のモードを日本語表示しない
	set showcmd      " 打ったコマンドをステータスラインの下に表示
	set ruler        " ステータスラインの右側にカーソルの現在位置を表示する
	" カーソルキーでbuffer移動
	nmap <C-p> <Plug>AirlineSelectPrevTab
	nmap <C-n> <Plug>AirlineSelectNextTab
	let g:airline_theme = 'powerlineish'
	let g:airline_powerline_fonts = 1
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#wordcount#enabled = 0
	let g:airline#extensions#tabline#formatter = 'unique_tail'
	let g:airline#extensions#ale#error_symbol = ' '
	let g:airline#extensions#ale#warning_symbol = ' '
	let g:airline#extensions#coc#error_symbol =  ""
	let g:airline#extensions#coc#warning_symbol = ""
	let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
	let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
	let g:airline#extensions#default#layout = [
    \ [ 'a', 'b', 'c' ],
    \ [ 'x', 'y', 'z', 'warning' , 'error']]
    let g:airline#extensions#default#section_truncate_width = {
    \ 'b': 79,
    \ 'x': 60,
    \ 'y': 100,
    \ 'z': 45,
    \ 'warning': 80,
    \ 'error': 80,
    \ }
	let g:airline_section_z = '%3v:%l/%L %3p%%'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# 未完----------------------------------------------------------
# ----MATLAB----
# [[plugins]] # matlab
# repo = 'daeyun/vim-matlab'
# on_ft = ['matlab']
# hook_add = '''
#     let g:matlab_server_launcher = 'vim'
# '''

# [[plugins]] # for tmux
# repo = 'edkolev/tmuxline.vim'
# hook_add = '''
#     let g:tmuxline_preset = {
#       \'a'    : '#S',
#       \'c'    : ['#(whoami)'],
#       \'win'  : ['#I', '#W'],
#       \'cwin' : ['#I', '#W', '#F'],
#       \'x'    : '',
#       \'y'    : ['#[fg=yellow]⚡#(battery.exe -t -e)'],
#       \'z'    : ['%m/%d(%a) %H:%M'],
#       \'options' : {'status-justify':'left'}}
#     let g:tmuxline_theme = 'papercolor'
# '''
