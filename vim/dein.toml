# プラグインの管理
[[plugins]] # これ使うのに必要
repo = 'Shougo/dein.vim'

[[plugins]] # 非同期実行(vim-clang-formatに必要)
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # コメントアウトに便利
repo = 'tyru/caw.vim'
hook_add = '''
	nmap gct <Plug>(caw:jump:comment-prev)TODO:<Space>
	nnoremap gcl :vimgrep /TODO:/j %<CR>
'''

# ----Markdownサポート----
[[plugins]] # Markdownの編集をサポート
repo = 'plasticboy/vim-markdown'
on_ft = 'md'
hook_add = '''
	let g:vim_markdown_folding_disabled=1
	let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]] # テーブルの生成を補助?
repo = 'godlygeek/tabular'
on_ft = 'md'

[[plugins]] # テーブルの生成
repo = 'dhruvasagar/vim-table-mode'
on_ft = 'md'
hook_add = '''
	let g:table_mode_corner='|'
	let g:table_mode_tableize_map = '<Leader>tb'
'''

[[plugins]] # markdown用のctags
repo = 'jszakmeister/markdown2ctags'
on_ft = 'md'

[[plugins]] # tagジャンプ
repo = 'majutsushi/tagbar'
depends = ['markdown2ctags']
hook_add = '''
	let g:tagbar_width = 30
	let g:tagbar_map_togglesort = 'S'
	autocmd vimrc VimResized,VimEnter * call s:auto_open_tagbar()
	" ウィンドウ幅が大きいときはtagbarを開いておく。
	function! s:auto_open_tagbar() abort
		let s:is_opened_tagbar = bufwinid('Tagbar')
		if winwidth(0) >= 150 && s:is_opened_tagbar==-1
			" フォーカスは編集中のファイルに戻す
			let s:win_id = win_getid()
			TagbarOpen
			let succeed = win_gotoid(s:win_id)
		elseif winwidth(0) < 120 && s:is_opened_tagbar!=-1
			execute "bdelete" . winbufnr(s:is_opened_tagbar)
		endif
	endfunction
	nnoremap <silent> <leader>tt :TagbarToggle<CR>
	let g:tagbar_type_markdown = {
		\ 'ctagstype': 'markdown',
		\ 'ctagsbin' : $HOME . '/.vim/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
		\ 'ctagsargs' : '-f - --sort=yes',
		\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
		\ ],
		\ 'sro' : '|',
		\ 'kind2scope' : {
		\ 's' : 'section',
		\ },
		\ 'sort': 0,
		\ }
'''

[[plugins]] # gitをvimで操作
repo = 'tpope/vim-fugitive'
hook_add = '''
	nnoremap [fugitive]  <Nop>
	nmap <space>g [fugitive]
	nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
	nnoremap <silent> [fugitive]a :Gwrite<CR>
	nnoremap <silent> [fugitive]c :Gcommit-v<CR>
	nnoremap <silent> [fugitive]b :Gblame<CR>
	nnoremap <silent> [fugitive]d :Gdiff<CR>
	nnoremap <silent> [fugitive]m :Gmerge<CR>
'''


[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'
hook_add = '''
	set background=dark
	autocmd vimrc VimEnter * nested colorscheme gruvbox
'''

[[plugins]] # 括弧関連便利になる
repo = 'tpope/vim-surround'

[[plugins]] # 括弧などを入力したときの挙動をスマートに補完
repo = 'jiangmiao/auto-pairs'

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'

[[plugins]] # インデントの深さを可視化(要tabstop&shiftwidth設定)
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_auto_colors = 0
	autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgrey
	autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=lightgrey
'''

[[plugins]] # 適切なカーソルラインのハイライト
repo = 'delphinus/vim-auto-cursorline'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
	command! -bang -nargs=? -complete=dir Files
	  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
	let g:fzf_layout = { 'down': '~40%' }
	nnoremap <silent> ,f :<C-u>Files<CR>
	nnoremap <silent> ,b :<C-u>Buffers<CR>
	nnoremap <silent> ,l :<C-u>BLines<CR>
	nnoremap <silent> ,h :<C-u>History<CR>
'''

[[plugins]] # 検索を改善
repo = 'haya14busa/incsearch.vim'
hook_add = '''
	map /  <Plug>(incsearch-forward)
	map ?  <Plug>(incsearch-backward)
	map g/ <Plug>(incsearch-stay)
'''

[[plugins]] # fuzzy検索
repo = 'haya14busa/incsearch-fuzzy.vim'
depends = ['incsearch.vim']
hook_add = '''
	map z/ <Plug>(incsearch-fuzzy-/)
	map z? <Plug>(incsearch-fuzzy-?)
	map zg/ <Plug>(incsearch-fuzzy-stay)
'''

[[plugins]] # migemo検索
repo = 'haya14busa/incsearch-migemo.vim'
depends = ['incsearch.vim']
hook_add = '''
	map s/ <Plug>(incsearch-migemo-/)
	map s? <Plug>(incsearch-migemo-?)
	map sg/ <Plug>(incsearch-migemo-stay)
'''

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'

[[plugins]] # nvim系に必要
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]] # nvim系に必要
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]] # defx icons
repo = 'kristijanhusak/defx-icons'
# on_source = ['Shougo/defx.nvim']
hook_add = '''
	let g:defx_icons_enable_syntax_highlight = 1
	let g:defx_icons_column_length = 2
'''

[[plugins]] # file explorer
repo = 'Shougo/defx.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc','defx-icons']
hook_add = '''
	autocmd vimrc VimResized,VimEnter * call s:auto_open_defx()
	" ウィンドウ幅が大きいときはdefxを開いておく。
	function! s:auto_open_defx() abort
		" 現在のタブページ内でのウィンドウIDで開閉判定
		let s:is_opened_defx = bufwinid('defx')
		if winwidth(0) >= 120 && s:is_opened_defx==-1
			" フォーカスは編集中のファイルに戻す
			let s:win_id = win_getid()
			Defx -split=vertical -columns=mark:indent:icons:filename:type
			\ -winwidth=30  -direction=topleft
			let succeed = win_gotoid(s:win_id)
		elseif winwidth(0) < 120 && s:is_opened_defx!=-1
			execute 'bdelete' . winbufnr(s:is_opened_defx)
		endif
	endfunction
	" windowが編集ファイル以外だけになったら違うバッファへ
	autocmd vimrc WinEnter * call s:move_buffer_for_defx()
	function! s:move_buffer_for_defx() abort
		if &ft == 'defx' && winnr('$') == 1
			q
			buffer #
			call s:auto_open_defx()
		elseif &ft == 'defx' && winnr('$') == 2 && bufnr('Tagbar')!=-1
			q
			TagbarClose
			buffer #
			call s:auto_open_defx()
			call s:auto_open_tagbar()
		elseif &ft == 'Tagbar' && winnr('$') == 1
			TagbarClose
			buffer #
			call s:auto_open_tagbar()
		end
	endfunction

	nnoremap <silent> <Space>f
	\ :<C-u>Defx -split=vertical -columns=mark:indent:icons:filename:type
		\ -winwidth=30  -direction=topleft -toggle<CR>
	autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
		nnoremap <silent><buffer><expr> <CR>
		\ defx#is_directory() ?
		\ defx#do_action('open_or_close_tree') :
		\ defx#do_action('drop')
		nnoremap <silent><buffer><expr> o
		\ defx#do_action('open_or_close_tree')
		nnoremap <silent><buffer><expr> c
		\ defx#do_action('copy')
		nnoremap <silent><buffer><expr> m
		\ defx#do_action('move')
		nnoremap <silent><buffer><expr> p
		\ defx#do_action('paste')
		nnoremap <silent><buffer><expr> l
		\ defx#is_directory() ?
		\ defx#do_action('open') :
		\ defx#do_action('multi', ['drop', 'quit'])
		nnoremap <silent><buffer><expr> E
		\ defx#do_action('open', 'vsplit')
		nnoremap <silent><buffer><expr> P
		\ defx#do_action('open', 'pedit')
		nnoremap <silent><buffer><expr> O
		\ defx#do_action('open_or_close_tree')
		nnoremap <silent><buffer><expr> K
		\ defx#do_action('new_directory')
		nnoremap <silent><buffer><expr> N
		\ defx#do_action('new_file')
		nnoremap <silent><buffer><expr> M
		\ defx#do_action('new_multiple_files')
		nnoremap <silent><buffer><expr> C
		\ defx#do_action('toggle_columns',
		\                'mark:filename:type:size:time')
		nnoremap <silent><buffer><expr> S
		\ defx#do_action('toggle_sort', 'time')
		nnoremap <silent><buffer><expr> d
		\ defx#do_action('remove')
		nnoremap <silent><buffer><expr> r
		\ defx#do_action('rename')
		nnoremap <silent><buffer><expr> !
		\ defx#do_action('execute_command')
		nnoremap <silent><buffer><expr> x
		\ defx#do_action('execute_system')
		nnoremap <silent><buffer><expr> yy
		\ defx#do_action('yank_path')
		nnoremap <silent><buffer><expr> .
		\ defx#do_action('toggle_ignored_files')
		nnoremap <silent><buffer><expr> ;
		\ defx#do_action('repeat')
		nnoremap <silent><buffer><expr> h
		\ defx#do_action('cd', ['..'])
		nnoremap <silent><buffer><expr> ~
		\ defx#do_action('cd')
		nnoremap <silent><buffer><expr> q
		\ defx#do_action('quit')
		nnoremap <silent><buffer><expr> <Space>
		\ defx#do_action('toggle_select') . 'j'
		nnoremap <silent><buffer><expr> *
		\ defx#do_action('toggle_select_all')
		nnoremap <silent><buffer><expr> j
		\ line('.') == line('$') ? 'gg' : 'j'
		nnoremap <silent><buffer><expr> k
		\ line('.') == 1 ? 'G' : 'k'
		nnoremap <silent><buffer><expr> <C-l>
		\ defx#do_action('redraw')
		nnoremap <silent><buffer><expr> <C-g>
		\ defx#do_action('print')
		nnoremap <silent><buffer><expr> cd
		\ defx#do_action('change_vim_cwd')
	endfunction
'''

[[plugins]] # スニペット定義ファイル
repo = 'Shougo/neosnippet-snippets'

[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
on_ft = ['snippet']
depends = ['neosnippet-snippets']
hook_source = '''
	imap <C-k> <Plug>(neosnippet_expand_or_jump)
	smap <C-k> <Plug>(neosnippet_expand_or_jump)
	xmap <C-k> <Plug>(neosnippet_expand_or_jump)
	let g:neosnippet#snippets_directory = '~/dotfiles/mysnippet'
	let g:neosnippet#enable_completed_snippet = 1
	let g:neosnippet#expand_word_boundary = 1
'''


[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neosnippet.vim', 'nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#auto_complete_delay = 0
	let g:deoplete#enable_camel_case = 0
	let g:deoplete#enable_ignore_case = 0
	let g:deoplete#refresh_always = 1
	let g:deoplete#enable_smart_case = 1
	let g:deoplete#file#enable_buffer_path = 1
'''

[[plugins]]
repo = 'Shougo/neco-syntax'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']
depends = ['deoplete.nvim']

# ----lsp補完----
# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# build = 'bash install.sh'
# hook_add = '''
#     set signcolumn=yes
#     set completefunc=LanguageClient#complete
#     let g:LanguageClient_autoStart = 1
#     let g:LanguageClient_hasSnippetSupport = 0
#     let g:LanguageClient_settingsPath = expand("$HOME/dotfiles/vim/settings.json")
#     let g:LanguageClient_diagnosticsList="Location"
#     let g:LanguageClient_serverCommands = {
#         \ 'c': ['clangd-6.0'],
#         \ 'cpp': ['clangd-6.0'],
#         \ 'objc': ['clangd-6.0'],
#         \ 'objcpp': ['clangd-6.0'],
#         \ 'python': ['pyls'],
#         \ }
#     nnoremap <Leader>gd :call LanguageClient_textDocument_definition()<CR>
#     nnoremap <Leader>gr :call LanguageClient_textDocument_rename()<CR>
#     autocmd vimrc BufWritePre * :call LanguageClient#textDocument_formatting_sync()
#     let g:LanguageClient_diagnosticsDisplay = {
#     \     1: {
#     \         "name": "Error",
#     \         "texthl": "ALEError",
#     \         "signText": "",
#     \         "signTexthl": "ALEErrorSign",
#     \     },
#     \     2: {
#     \         "name": "Warning",
#     \         "texthl": "ALEWarning",
#     \         "signText": "",
#     \         "signTexthl": "ALEWarningSign",
#     \     },
#     \     3: {
#     \         "name": "Information",
#     \         "texthl": "ALEInfo",
#     \         "signText": "",
#     \         "signTexthl": "ALEInfoSign",
#     \     },
#     \     4: {
#     \         "name": "Hint",
#     \         "texthl": "ALEInfo",
#     \         "signText": "",
#     \         "signTexthl": "ALEInfoSign",
#     \     },
#     \ }
# '''

[[plugins]]
repo='prabirshrestha/async.vim'

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
depends = 'deoplete.nvim'

[[plugins]]
repo='prabirshrestha/vim-lsp'
depends = ['async.vim', 'deoplete-vim-lsp']
hook_add='''
	if executable('clangd-6.0')
		autocmd User lsp_setup call lsp#register_server({
			\ 'name': 'clangd',
			\ 'cmd': {server_info->['clangd-6.0']},
			\ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
			\ })
	endif
	if executable('pyls')
		autocmd vimrc User lsp_setup call lsp#register_server({
		\ 'name': 'pyls',
		\ 'cmd': {server_info->['pyls']},
		\ 'whitelist': ['python'],
		\ 'workspace_config': {'pyls': {
			\ 'configurationSources': ['flake8'],
			\ 'plugins':{
				\ 'pydocstyle':{'enabled': v:false},
				\ 'pycodestyle':{'enabled': v:false},
				\ 'pyflakes':{'enabled': v:false},
				\ 'pylint':{'enabled': v:false},
				\ 'autopep8':{'enabled': v:false},
				\ 'yapf':{'enabled': v:false},
				\ 'black':{'enabled': v:true},
				\ 'isort':{'enabled': v:true},
				\ 'flake8':{'enabled': v:true}}}}
		\ })
		autocmd vimrc FileType python call s:configure_lsp()
		autocmd vimrc  BufWritePre *.py LspDocumentFormatSync
	endif
	function! s:configure_lsp() abort
		setlocal omnifunc=lsp#complete
		" nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
		nnoremap <buffer> <leader>gd :<C-u>LspDefinition<CR>
		nnoremap <buffer> <leader>gD :<C-u>LspReferences<CR>
		nnoremap <buffer> <leader>gs :<C-u>LspDocumentSymbol<CR>
		nnoremap <buffer> <leader>gS :<C-u>LspWorkspaceSymbol<CR>
		nnoremap <buffer> <leader>gq :<C-u>LspDocumentFormat<CR>
		vnoremap <buffer> <leader>gQ :LspDocumentRangeFormat<CR>
		nnoremap <buffer> <leader>K :<C-u>LspHover<CR>
		nnoremap <buffer> <leader>gi :<C-u>LspImplementation<CR>
		nnoremap <buffer> <leader>gl :<C-u>LspRename<CR>
	endfunction
	let g:lsp_signs_enabled = 1
	let g:lsp_diagnostics_echo_cursor = 1
	let g:lsp_signs_error = {'text': ''}
	let g:lsp_signs_warning = {'text': ''}
	let g:lsp_signs_information = {'text': ''}
	let g:lsp_signs_hint = {'text': ''}
'''

[[plugins]] # ステータスラインとバッファ表示の強化
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes','tagbar','vim-devicons','coc.nvim']
hook_add = '''
	" ステータスラインの表示内容強化
	set laststatus=2 " ステータスラインを常に表示
	set noshowmode   " 現在のモードを日本語表示しない
	set showcmd      " 打ったコマンドをステータスラインの下に表示
	set ruler        " ステータスラインの右側にカーソルの現在位置を表示する
	" カーソルキーでbuffer移動
	" nmap <C-p> <Plug>AirlineSelectPrevTab
	" nmap <C-n> <Plug>AirlineSelectNextTab
	nnoremap <C-p> :<C-u>bprevious<CR>
	nnoremap <C-n> :<C-u>bnext<CR>
	let g:airline_theme = 'powerlineish'
	let g:airline_powerline_fonts = 1
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline#extensions#wordcount#enabled = 0
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#formatter = 'unique_tail'
	let g:airline#extensions#languageclient#enabled = 1
	let g:airline#extensions#languageclient#error_symbol = ' '
	let g:airline#extensions#languageclient#warning_symbol = ' '
	let g:airline#extensions#default#layout = [
    \ [ 'a', 'b', 'c' ],
    \ [ 'x', 'y', 'z', 'warning' , 'error']]
    let g:airline#extensions#default#section_truncate_width = {
    \ 'b': 79,
    \ 'x': 60,
    \ 'y': 100,
    \ 'z': 45,
    \ 'warning': 80,
    \ 'error': 80,
    \ }
	let g:airline_section_z = '%3v:%l/%L %3p%%'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# 未完----------------------------------------------------------
# ----MATLAB----
# [[plugins]] # matlab
# repo = 'daeyun/vim-matlab'
# on_ft = ['matlab']
# hook_add = '''
#     let g:matlab_server_launcher = 'vim'
# '''

# [[plugins]] # for tmux
# repo = 'edkolev/tmuxline.vim'
# hook_add = '''
#     let g:tmuxline_preset = {
#       \'a'    : '#S',
#       \'c'    : ['#(whoami)'],
#       \'win'  : ['#I', '#W'],
#       \'cwin' : ['#I', '#W', '#F'],
#       \'x'    : '',
#       \'y'    : ['#[fg=yellow]⚡#(battery.exe -t -e)'],
#       \'z'    : ['%m/%d(%a) %H:%M'],
#       \'options' : {'status-justify':'left'}}
#     let g:tmuxline_theme = 'papercolor'
# '''
