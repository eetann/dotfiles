# プラグインの管理
[[plugins]] # これ使うのに必要
repo = 'Shougo/dein.vim'

[[plugins]] # 非同期実行(openbrowserに必要)
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # プレビューをブラウザで開く
repo = 'tyru/open-browser.vim'
hook_add = '''
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>p
		\ :execute "OpenBrowser http://localhost:8000/" . expand('%')<CR>
	autocmd vimrc BufNewFile,BufRead *.html,*.py nnoremap <buffer><Leader>cp
		\ :term ++rows=5 cmd.exe /c python server.py
	let g:netrw_nogx = 1 " disable netrw's gx mapping.
	nmap gx <Plug>(openbrowser-smart-search)
	vmap gx <Plug>(openbrowser-smart-search)
	function! My_opens()
		execute 'OpenBrowser ' . substitute(expand('%:p'), '\v/mnt/(.)', '\1:/', 'c')
	endfunction
'''

[[plugins]] # コメントアウトに便利
repo = 'tyru/caw.vim'
hook_add = '''
	let g:caw_dollarpos_sp_left=' '
	nmap gct <Plug>(caw:jump:comment-prev)TODO:<Space>
	nmap gcO <Plug>(caw:jump:comment-prev)
	nnoremap gcl :vimgrep /TODO:/j %<CR>
'''

[[plugins]] # ヤンク時に一瞬ハイライト
repo = "machakann/vim-highlightedyank"

# textobjct-------------------------------------------------------
[[plugins]] # テキストオブジェクトの追加のため
repo = 'kana/vim-textobj-user'

# [[plugins]] # l 改行文字を含まずに行を扱う
# repo = 'kana/vim-textobj-line'
# depends = 'vim-textobj-user'

[[plugins]] # uでURLをtextobj
repo = 'mattn/vim-textobj-url'
depends = 'vim-textobj-user'

[[plugins]] # bかsbで近いペアをtextobj
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
hook_add = '''
	omap ab <Plug>(textobj-multiblock-a)
	omap ib <Plug>(textobj-multiblock-i)
	xmap ab <Plug>(textobj-multiblock-a)
	xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]] # ,で引数をtextobj
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'

[[plugins]] # dでデリミタ(_,#,-や大文字間)をtextobj
repo = 'machakann/vim-textobj-delimited'
depends = 'vim-textobj-user'
hook_add = """
	let g:textobj_delimited_patterns =[
	\ ['\m/', '\m\%(/[-.[:alnum:]_~]\+\)\+'],
	\ ['\m\\', '\m\a:\%(\\[^\\/?:*"<>|]\+\)\+\ze\%(''[^a-z]\|$\)'],
	\ ['\m\.', '\m\<\%(\.\k\+\|\k\+\.\)\%(\k*\.\?\)*\>', 10],
	\ ['\m#', '\m\<\%(#\k\+\|\k\+#\)\%(\k*#\?\)*\>', 10],
	\ ['\m_', '\m\<\%(_\k\+\|\k\+_\)\%(\k*_\?\)*\>', 10],
	\ ['\m-', '\m\<\%(-\k\+\|\k\+-\)\%(\k*-\?\)*\>', 10],
	\ ['\m\C[^A-Z]\zs\ze[A-Z]', '\m\C\<[A-Z]\?\k\+[A-Z]\%(\k*[A-Z]\?\)*\>', 10]]
"""

[[plugins]] # 括弧関連便利になる
repo = 'tpope/vim-surround'
hook_add ="""
	let g:highlightedyank_highlight_duration = 500
"""

[[plugins]] # 括弧などを入力したときの挙動をスマートに補完
repo = 'jiangmiao/auto-pairs'

[[plugins]] # マルチカーソル(矩形の拡張)
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
	let g:multi_cursor_use_default_mapping = 0
	let g:multi_cursor_start_word_key      = '<C-s>'
	let g:multi_cursor_select_all_word_key = '<A-s>'
	let g:multi_cursor_start_key           = 'g<C-s>'
	let g:multi_cursor_select_all_key      = 'g<A-s>'
	let g:multi_cursor_next_key            = '<C-s>'
	let g:multi_cursor_prev_key            = '<C-p>'
	let g:multi_cursor_skip_key            = '<C-x>'
	let g:multi_cursor_quit_key            = '<Esc>'
'''

[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'
hook_add = '''
	set background=dark
	autocmd vimrc VimEnter * nested colorscheme gruvbox
'''

[[plugins]] # インデントの深さを可視化(要tabstop&shiftwidth設定)
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_auto_colors = 0
	autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgrey
	autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=lightgrey
'''

[[plugins]] # nvim系に必要
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]] # nvim系に必要
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# スニペット定義ファイル
[[plugins]] 
repo = 'honza/vim-snippets'

[[plugins]] # snippet
repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]] # スニペット管理
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets','vim-snippets']
hook_add = '''
	let g:neosnippet#snippets_directory = ['~/dotfiles/mysnippet', '~/.vim/dein/repos/github.com/honza/vim-snippets/snippets']
	let g:neosnippet#enable_completed_snippet = 1 " 関数スニペットを展開
	let g:neosnippet#expand_word_boundary = 0 " jump時に間違えて補完されないようにオフ
	let g:neosnippet#disable_runtime_snippets = {'_' : 1}
	imap <C-k> <Plug>(neosnippet_expand_or_jump)
	smap <C-k> <Plug>(neosnippet_expand_or_jump)
	xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]] # use look cmd
repo = 'Shougo/neco-vim'

[[plugins]] # use look cmd
repo = 'neoclide/coc-neco'

[[plugins]] # LSP補完
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
depends = ['neosnippet.vim']
hook_add = '''
	set signcolumn=yes
	set updatetime=300
	highlight link CocHighlightText GruvboxBlueSign
	autocmd CursorHold * silent call CocActionAsync('highlight')
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
	nnoremap <F10> :<C-u>CocConfig<CR>
	inoremap <silent><expr> <C-space> coc#refresh()
	" Use `[c` and `]c` for navigate diagnostics
	nmap <silent> [c <Plug>(coc-diagnostic-prev)
	nmap <silent> ]c <Plug>(coc-diagnostic-next)
	nmap <silent> <leader>gd <Plug>(coc-definition)
	nmap <silent> <leader>gD <Plug>(coc-type-definition)
	nmap <silent> <leader>gi <Plug>(coc-implementation)
	nmap <silent> <leader>gf <Plug>(coc-references)
	nmap <leader>gn <Plug>(coc-rename)
	let g:airline#extensions#coc#error_symbol =  ""
	let g:airline#extensions#coc#warning_symbol = ""
	let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
	let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
	let g:coc_start_at_startup=1
	nnoremap <silent> K :call <SID>show_documentation()<CR>
	function! s:show_documentation()
		if (index(['vim','help'], &filetype) >= 0)
			execute 'h '.expand('<cword>')
		else
			call CocAction('doHover')
		endif
	endfunction
	omap iF <Plug>(coc-funcobj-i)
	omap aF <Plug>(coc-funcobj-a)
	vmap iF <Plug>(coc-funcobj-i)
	vmap aF <Plug>(coc-funcobj-a)
	" imap <silent><expr> <C-k>
	"\ pumvisible() ? coc#_select_confirm() :
	"\ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
	"\ coc#refresh()
	" smap <C-k> <Plug>(coc-snippets-expand-jump)
	" let g:coc_snippet_next = '<C-k>'
	" let g:coc_snippet_prev = '<S-tab>'
'''

[[plugins]] # tagジャンプ
repo = 'majutsushi/tagbar'
hook_add = '''
	let g:tagbar_width = 30
	let g:tagbar_sort = 0
	let g:tagbar_map_togglesort = 'S'
	let g:can_auto_opens_defx_tagbar = 1
	" autocmd vimrc VimResized,VimEnter * call s:auto_open_tagbar()
	" " ウィンドウ幅が大きいときはtagbarを開いておく。
	" function! s:auto_open_tagbar() abort
	" 	if g:can_auto_opens_defx_tagbar==1
	" 		let s:is_opened_tagbar = bufwinid('Tagbar')
	" 		if winwidth(0) >= 120 && s:is_opened_tagbar==-1
	" 			" フォーカスは編集中のファイルに戻す
	" 			let s:win_id = win_getid()
	" 			TagbarOpen
	" 			let succeed = win_gotoid(s:win_id)
	" 		elseif winwidth(0) < 120 && s:is_opened_tagbar!=-1
	" 			execute "bdelete" . winbufnr(s:is_opened_tagbar)
	" 		endif
	" 	endif
	" endfunction
	nnoremap <silent> <leader>tt :TagbarToggle<CR>
	let g:tagbar_type_markdown = {
		\ 'ctagstype': 'markdown',
		\ 'ctagsbin' : $HOME . '/.vim/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
		\ 'ctagsargs' : '-f - --sort=yes',
		\ 'kinds' : [
		\ 's:sections',
		\ 'i:images'
		\ ],
		\ 'sro' : '|',
		\ 'kind2scope' : {
		\ 's' : 'section',
		\ },
		\ 'sort': 0,
		\ }
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]] # ステータスラインとバッファ表示の強化
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes','tagbar','vim-devicons','coc.nvim']
hook_add = '''
	" ステータスラインの表示内容強化
	set laststatus=2 " ステータスラインを常に表示
	set noshowmode   " 現在のモードを日本語表示しない
	set showcmd      " 打ったコマンドをステータスラインの下に表示
	set ruler        " ステータスラインの右側にカーソルの現在位置を表示する
	let g:airline_theme = 'powerlineish'
	let g:airline_powerline_fonts = 1
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#tagbar#enabled = 1
	let g:airline#extensions#wordcount#enabled = 0
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#formatter = 'unique_tail'
	let g:airline_left_sep =''
	let g:airline_left_alt_sep=''
	let g:airline_right_sep =''
	let g:airline_right_alt_sep=''
	let g:airline#extensions#default#layout = [
    \ [ 'a', 'b', 'c' ],
    \ [ 'x', 'y', 'z', 'warning' , 'error']]
    let g:airline#extensions#default#section_truncate_width = {
    \ 'b': 79,
    \ 'x': 60,
    \ 'y': 100,
    \ 'z': 45,
    \ 'warning': 80,
    \ 'error': 80,
    \ }
	let g:airline_section_z = '%3v:%l/%L %3p%%'
'''

[[plugins]] # defx icons
repo = 'kristijanhusak/defx-icons'
hook_add = '''
	let g:defx_icons_enable_syntax_highlight = 0
	let g:defx_icons_column_length = 2
'''

