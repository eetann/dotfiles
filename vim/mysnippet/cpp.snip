snippet     meta
abbr        meta
options     head
    /*
     * ${1:`expand('%:t')`}
     *
     *  ${2:Created on: `strftime("%Y/%m/%d")`}
     *      ${3:Author:} ${4:name}
     */
    ${5:}

snippet     using
abbr        using namespace std;
options     head
    using namespace std;

snippet     qmain
abbr        int main() { hoge }
options     head
    int main() {
        ${1:hoge}
    }

snippet     mainq
abbr        int main() { hoge }
options     head
    int main() {
        ${1:hoge}
    }

snippet     cq
abbr        << ""
options     word
    << "${1:#:hoge}" ${2:#:use snippet my connect}

snippet     qc
abbr        << ""
options     word
    << "${1:#:hoge}" ${2:#:use snippet my connect}

snippet     cout
abbr        cout << endl;
options     head
    cout << "${1:#:hoge}" ${2:#:use snippet my connect}${3:<< endl};${0}

snippet     qcout
abbr        cout << endl;
options     head
    cout << "${1:#:hoge}" ${2:#:use snippet my connect}${3:<< endl};${0}

snippet     cin
abbr        cin >>;
options     head
    cin >> ${1};${0}

snippet     qtypedefstruct
abbr        typedef struct
options     head
    typedef struct ${1:#:name of struct}{
        ${0:TARGET}
    }${2:#:name of type};

snippet     typedefstructq
abbr        typedef struct
options     head
    typedef struct ${1:#:name of struct}{
        ${0:TARGET}
    }${2:#:name of type};

snippet     qq
abbr        =;
options     word
     ${1:} = ${2:};${0:}

snippet     qclass
abbr        class
options     head
    class ${1}: ${2} {
        ${3}
        public:
            $1(${4}): ${5} {}
            ${6}
    };

snippet     qvector
abbr        vector
options     head
    vector<${1}> ${2};

snippet     qvectorfor
abbr        for vector
options     head
    for (vector<${1}>::size_type ${2} = ${3}; $2 < ${4}; $2++) {
        ${0}
    }
