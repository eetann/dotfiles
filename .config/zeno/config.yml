snippets:
  # 長いコマンドの展開
  - name: "blog new articledocker"
    keyword: "BLOG"
    snippet: "node bin/new.mjs --slug"

  - name: "claude code"
    keyword: "cc"
    snippet: "claude"

  - name: "codex"
    keyword: "cx"
    snippet: "codex"

  - name: "docker compose"
    keyword: "DC"
    snippet: "docker-compose"

  - name: "explorer"
    keyword: "E"
    snippet: "/mnt/c/windows/explorer.exe ."

  - name: "php artisan"
    keyword: "PA"
    snippet: "php artisan"

  - name: "difit"
    keyword: "difit"
    snippet: "bun x difit ."

  - name: "SJIS to UTF-8"
    keyword: "UTF"
    snippet: "nkf -w --overwrite"

  - name: "tmux popup neovim"
    keyword: "TN"
    snippet: tmux popup -E -w 95% -h 95%
      -d '#{pane_current_path}'
      'nvim -c "{{command_here)}}"'

  - name: "tree"
    keyword: "TREE"
    snippet: "tree -a -I '.git|node_modules|dist|vendor|platforms' --charset unicode"

  - name: "git switch"
    keyword: "gs"
    snippet: "git switch"

  # 指定したcsvの2列目に重複したデータがないか調べる
  # 列を変えるなら`-f2`の部分を変更する
  - name: "csv checker for duplicates col2"
    keyword: "csv_checker_for_duplicates_col2"
    snippet: "tail -n +2 {{csv_here}} | cut -d, -f2 | sort | uniq -d"

  # ディレクトリ名の短縮入力
  - name: "cd media for blog"
    keyword: "MEDIA"
    snippet: "$VITE_EXTERNAL_FOLDER"
    context:
      lbuffer: '.+\s'

  - name: "input 'download'"
    keyword: "DL"
    snippet: "~/Downloads/"
    context:
      lbuffer: '.+\s'

  # パイプ以降の展開
  - name: "cd there"
    keyword: "CD"
    snippet: "&& cd $_"
    context:
      lbuffer: '.+\s'

  - name: "copy"
    keyword: "CC"
    snippet: "| pbcopy"
    context:
      lbuffer: '.+\s'

  - name: "grep"
    keyword: "G"
    snippet: "| grep"
    context:
      lbuffer: '.+\s'

  - name: "null"
    keyword: "NULL"
    snippet: ">/dev/null 2>&1"
    context:
      lbuffer: '.+\s'

completions:
  - name: kill signal
    patterns:
      - "^kill -s $"
    sourceCommand: "kill -l | tr ' ' '\\n'"
    options:
      --prompt: "'Kill Signal> '"
      --tmux: "80%"
      --no-select-1: true

  - name: kill pid
    patterns:
      - "^kill( .*)? $"
    excludePatterns:
      # -l, -n or -s is followed by SIGNAL instead of PID
      - " -[lns] $"
    sourceCommand: "LANG=C ps -ef"
    options:
      --header-lines: 1
      --multi: true
      --prompt: "'Kill Process> '"
      --tmux: "80%"
      --no-select-1: true
    callback: "awk '{print $2}'"

  # Docker
  - name: docker stop
    patterns:
      - "^docker stop $"
    sourceCommand: "docker ps"
    options:
      --header-lines: 1
      --tmux: "80%"
      --prompt: "'Docker Stop> '"
      --no-select-1: true
    callback: "awk '{print $1}'"

  - name: docker rm(コンテナ)
    patterns:
      - "^docker rm $"
    sourceCommand: "docker ps -a"
    options:
      --header-lines: 1
      --tmux: "80%"
      --multi: true
      --prompt: "'Docker Remove Container> '"
      --no-select-1: true
    callback: "awk '{print $1}'"

  - name: docker rmi(イメージ)
    patterns:
      - "^docker rmi $"
    sourceCommand: "docker images"
    options:
      --header-lines: 1
      --tmux: "80%"
      --multi: true
      --prompt: "'Docker Remove Image> '"
      --no-select-1: true
    callback: "awk '{print $3}'"

  # zsh/myfunction/mise.zsh から呼び出す
  - name: mise run
    patterns:
      - "^mise run $"
    sourceCommand: "mise tasks --no-header"
    options:
      --no-select-1: true
    callback: "awk '{print $1}'"

  # zsh/myfunction/npm_scripts.zsh から呼び出す
  - name: npm scripts
    patterns:
      - "^(npm|pnpm|bun) run $"
    sourceCommand: jq -r '.scripts | to_entries | .[] | .key + " = " + .value' package.json
    options:
      --no-select-1: true
    callback: "awk '{print $1}'"

  # React Native IPA ファイルをリネーム
  # - name: rename ipa file
  #   patterns:
  #     - "^ipa-rename $"
  #   sourceCommand: "find . -maxdepth 1 -name '*.ipa' -type f -exec ls -la {} \\; | awk '{print $9, \"(\" $5 \" bytes, \" $6 \" \" $7 \" \" $8 \")\"}'"
  #   options:
  #     --header-lines: 0
  #     --tmux: "80%"
  #     --prompt: "'Select IPA file> '"
  #     --no-select-1: true
  #   callback: "
  #     awk '{print $1}'
  #     | xargs -I {} sh -c 'branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null
  #         || echo \"main\");
  #       datetime=$(date \"+%Y-%m-%d-%H-%M\");
  #       mv \"{}\" \"build-$branch-$datetime.ipa\"
  #       && echo \"Renamed to: build-$branch-$datetime.ipa\"'
  #     "
