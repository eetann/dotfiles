# プラグインの管理
[[plugins]] # これ使うのに必要
repo = 'Shougo/dein.vim'

[[plugins]] # 非同期実行(vim-clang-formatに必要)
repo = 'Shougo/vimproc.vim'
build = 'make'

# [[plugins]] # インタラクティブフィルター(ファイル検索に便利)
# repo = 'junegunn/fzf'
# build = './install --all'

# [[plugins]]
# repo = 'junegunn/fzf.vim'

[[plugins]] # ファイルツリーの表示
repo = 'scrooloose/nerdtree'

[[plugins]] # コメントアウトに便利
repo = 'scrooloose/nerdcommenter'
hook_add ='''
    let g:NERDSpaceDelims = 1
    let g:NERDDefaultAlign='left'
    let g:NERDCreateDefaultMappings = 0
    nmap <Leader>c<Space> <Plug>NERDCommenterToggle
    vmap <Leader>c<Space> <Plug>NERDCommenterToggle
    nmap <Leader>cA <Plug>NERDCommenterAppend
    " TODOコメント追加
    nmap <Leader>ctd <Plug>NERDCommenterAppendTODO:<Space>
    " TODOをlocation listとして開く
	nnoremap <Leader>tl :vimgrep /TODO:/j %<CR>:cwindow<CR>
	" TODO: 他のアノテーションも追加
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]] # ステータスラインとバッファ表示の強化
repo = 'vim-airline/vim-airline'
hook_add = '''
	" ステータスラインの表示内容強化
	set laststatus=2 " ステータスラインを常に表示
	set noshowmode   " 現在のモードを日本語表示しない
	set showcmd      " 打ったコマンドをステータスラインの下に表示
	set ruler        " ステータスラインの右側にカーソルの現在位置を表示する
	" カーソルキーでbuffer移動
	nnoremap <C-p> :bp<CR>
	nnoremap <C-n> :bn<CR>
	let g:airline_theme = 'powerlineish'
	let g:airline_powerline_fonts = 1
	let g:airline#extensions#branch#enabled = 1
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#wordcount#enabled = 0
	let g:airline#extensions#tabline#formatter = 'unique_tail'
	let g:airline#extensions#ale#error_symbol = ' '
	let g:airline#extensions#ale#warning_symbol = ' '
	let g:airline#extensions#default#layout = [
      \ [ 'a', 'b', 'c' ],
      \ [ 'x', 'y', 'z', 'warning' , 'error']]
    let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 79,
      \ 'x': 60,
      \ 'y': 100,
      \ 'z': 45,
      \ 'warning': 80,
      \ 'error': 80,
      \ }
	let g:airline_section_z = '%3v:%l/%L %3p%%'
'''
depends = ['vim-airline-themes']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]] # 構文チェック
repo = 'w0rp/ale'
hook_add ='''
	let g:ale_echo_msg_error_str = nr2char(0xf421)
	let g:ale_echo_msg_warning_str = nr2char(0xf420)
	let g:ale_echo_msg_info_str = nr2char(0xf05a)
	let g:ale_sign_error = g:ale_echo_msg_error_str
	let g:ale_sign_warning = g:ale_echo_msg_warning_str
	let g:ale_statusline_format = [
	  \ g:ale_echo_msg_error_str . ' %d',
	  \ g:ale_echo_msg_warning_str . ' %d',
	  \ nr2char(0xf4a1) . '  ']
	" let g:ale_echo_msg_format = '%severity%  %linter% - %s'
	" let g:ale_sign_error = 'x'
	" let g:ale_sign_warning = '⚠'
	let g:ale_fix_on_save = 1
	let g:ale_sign_column_always = 1
	let g:ale_lint_on_text_changed = 0
	let g:ale_lint_on_insert_leave = 1
	let b:ale_linters = {
	\	'c':['clang'],
	\	'cpp':['clang'],
	\	'python': ['flake8'],
	\	'vim': ['vint'],
	\}
	let g:ale_fixers = {
	\   'c': ['clang-format'],
	\   'cpp': ['clang-format'],
	\   'python': ['black','isort'],
	\}
	let g:ale_c_clangformat = '-style="{
	\   AlignConsecutiveAssignments:true,
	\   AlignConsecutiveDeclarations:true,
	\   IndentCaseLabels":true,
	\   IndentWidth:4,
	\   KeepEmptyLinesAtTheStartOfBlocks:true,
	\   SpacesBeforeTrailingComments:1,
	\   TabWidth":4,
	\   UseTab:ForIndentation	
	\}"'
	let g:ale_cpp_clangformat = '-style="{
	\   AlignConsecutiveAssignments:true,
	\   AlignConsecutiveDeclarations:true,
	\   IndentCaseLabels":true,
	\   IndentWidth:4,
	\   KeepEmptyLinesAtTheStartOfBlocks:true,
	\   SpacesBeforeTrailingComments:1,
	\   TabWidth":4,
	\   UseTab:ForIndentation	
	\}"'
'''

[[plugins]] # gitをvimで操作
repo = 'tpope/vim-fugitive'

[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'
hook_add = '''
  set background=dark
  autocmd vimrc VimEnter * nested colorscheme gruvbox
'''

[[plugins]] # 画面の移動が便利になる
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
    " デフォルトのキーマッピングを無効に
    let g:EasyMotion_do_mapping = 0
    " f + 2文字 で画面全体を検索してジャンプ
    nmap f <plug>(easymotion-overwin-f2)
    " 検索時、大文字小文字を区別しない
    let g:EasyMotion_smartcase = 1
'''

[[plugins]] # ドットコマンド対象を拡張
on_event = 'InsertEnter'
repo = 'tpope/vim-repeat'

[[plugins]] # マーク位置の表示
repo = 'kshenoy/vim-signature'

[[plugins]] # NERDTreeにGitの情報を表示
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # インデントの深さを可視化(要tabstop&shiftwidth設定)
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_auto_colors = 0
	autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgrey
	autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=lightgrey
'''

# ----lsp補完とスニペット----

[[plugins]] # lspでの補完
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['neosnippet.vim']
hook_source = '''
  autocmd vimrc User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
	  \ 'name': 'neosnippet',
	  \ 'whitelist': ['*'],
	  \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
	  \ }))
'''


[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
hook_source = '''
  " <TAB>: completion.
  inoremap <expr> <S-TAB> pumvisible() ? '<C-p>' : '<S-TAB>'

  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)

  " SuperTab like snippets behavior.
  imap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '<C-n>' : '<TAB>'
  smap <expr> <TAB> neosnippet#jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'

  let g:neosnippet#snippets_directory = '~/.vim/mysnippet'
'''


[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# [[plugins]] # snippets ファイルだけを使うので runtimepath へ追加しない
# repo = 'honza/vim-snippets'
# rtp = ''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]] # lspでの補完
repo = 'prabirshrestha/vim-lsp'
hook_add='''
	if executable('clangd-6.0')
		au User lsp_setup call lsp#register_server({
			\ 'name': 'clangd',
			\ 'cmd': {server_info->['clangd-6.0']},
			\ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
			\ })
	endif
	if executable('pyls')
		au User lsp_setup call lsp#register_server({
			\ 'name': 'pyls',
			\ 'cmd': {server_info->['pyls']},
			\ 'whitelist': ['python'],
			\ })
	endif
	let g:lsp_diagnostics_enabled = 0 "w0rp/aleで対応するので無効化
	let g:lsp_async_completion = 1
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['asyncomplete.vim', 'vim-lsp']

# [[plugins]] # lspでの補完
# repo = 'prabirshrestha/vim-lsp'
# hook_add='''
#     if executable('clangd-6.0')
#         au User lsp_setup call lsp#register_server({
#             \ 'name': 'clangd',
#             \ 'cmd': {server_info->['clangd-6.0']},
#             \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
#             \ })
#     endif
#     if executable('pyls')
#         au User lsp_setup call lsp#register_server({
#             \ 'name': 'pyls',
#             \ 'cmd': {server_info->['pyls']},
#             \ 'whitelist': ['python'],
#             \ })
#     endif
#     let g:lsp_diagnostics_enabled = 0 "w0rp/aleで対応するので無効化
#     let g:lsp_async_completion = 1
# '''

# [[plugins]] # lspでの補完
# repo = 'prabirshrestha/async.vim'

# [[plugins]] # lspでの補完
# repo='prabirshrestha/asyncomplete.vim'

# [[plugins]] # lspでの補完
# repo='prabirshrestha/asyncomplete-lsp.vim'
# depends = ['asyncomplete.vim', 'vim-lsp']

# [[plugins]]
# repo = 'prabirshrestha/asyncomplete-ultisnips.vim'

# [[plugins]]
# repo = 'SirVer/ultisnips'
# hook_add = '''
# " UltiSnips スニペット展開
# let g:UltiSnipsExpandTrigger="<c-k>"
# " UltiSnips スニペット次の位置に移動
# let g:UltiSnipsJumpForwardTrigger="<c-n>"
# " UltiSnips スニペット前の位置に戻る
# let g:UltiSnipsJumpBackwardTrigger="<c-p>"
# '''

# [[plugins]]
# repo = 'honza/vim-snippets'

#[[plugins]] # 
#repo = ''

#[[plugins]] # 
#repo = ''

#[[plugins]] # 
#repo = ''

#[[plugins]] # 
#repo = ''

#[[plugins]] # 
#repo = ''


